
IoT_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08003190  08003190  00013190  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080032a8  080032a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000000  080032ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000190  20000088  08003334  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000218  08003334  00020218  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010e10  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000276b  00000000  00000000  00030ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000072bc  00000000  00000000  00033633  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ad0  00000000  00000000  0003a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cf8  00000000  00000000  0003b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005c53  00000000  00000000  0003c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000042cc  00000000  00000000  00041d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00045fd7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000022b8  00000000  00000000  00046054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003178 	.word	0x08003178

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08003178 	.word	0x08003178

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
{
 80005c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f896 	bl	8000708 <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 f84a 	bl	8000684 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000020 	.word	0x20000020
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x30>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000612:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000622:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f81b 	bl	8000660 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffc8 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f001 fef2 	bl	8002418 <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40023c00 	.word	0x40023c00

0800063c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x10>)
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_IncTick+0x14>)
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	440b      	add	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200000cc 	.word	0x200000cc
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000cc 	.word	0x200000cc

08000660 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000662:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000664:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	0c1b      	lsrs	r3, r3, #16
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000670:	0200      	lsls	r0, r0, #8
 8000672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000676:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800067a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800067c:	60d3      	str	r3, [r2, #12]
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000686:	b530      	push	{r4, r5, lr}
 8000688:	68dc      	ldr	r4, [r3, #12]
 800068a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	2b04      	cmp	r3, #4
 8000696:	bf28      	it	cs
 8000698:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 0501 	mov.w	r5, #1
 80006a0:	fa05 f303 	lsl.w	r3, r5, r3
 80006a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a8:	bf8c      	ite	hi
 80006aa:	3c03      	subhi	r4, #3
 80006ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ae:	4019      	ands	r1, r3
 80006b0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b2:	fa05 f404 	lsl.w	r4, r5, r4
 80006b6:	3c01      	subs	r4, #1
 80006b8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	ea42 0201 	orr.w	r2, r2, r1
 80006c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	bfad      	iteet	ge
 80006c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	f000 000f 	andlt.w	r0, r0, #15
 80006ce:	4b06      	ldrlt	r3, [pc, #24]	; (80006e8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	bfb5      	itete	lt
 80006d6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	e000ed14 	.word	0xe000ed14

080006ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006ec:	2800      	cmp	r0, #0
 80006ee:	db08      	blt.n	8000702 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f0:	0942      	lsrs	r2, r0, #5
 80006f2:	2301      	movs	r3, #1
 80006f4:	f000 001f 	and.w	r0, r0, #31
 80006f8:	fa03 f000 	lsl.w	r0, r3, r0
 80006fc:	4b01      	ldr	r3, [pc, #4]	; (8000704 <HAL_NVIC_EnableIRQ+0x18>)
 80006fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100

08000708 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000708:	3801      	subs	r0, #1
 800070a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800070e:	d20a      	bcs.n	8000726 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000714:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	21f0      	movs	r1, #240	; 0xf0
 8000718:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000720:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000734:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000738:	2b02      	cmp	r3, #2
 800073a:	d003      	beq.n	8000744 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000740:	2001      	movs	r0, #1
 8000742:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000744:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000746:	2305      	movs	r3, #5
 8000748:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800074c:	6813      	ldr	r3, [r2, #0]
 800074e:	f023 0301 	bic.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000754:	2000      	movs	r0, #0
}
 8000756:	4770      	bx	lr

08000758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800075c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000760:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000904 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000764:	4a65      	ldr	r2, [pc, #404]	; (80008fc <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000766:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000908 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800076a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800076c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800076e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000770:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000772:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000774:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000776:	42ac      	cmp	r4, r5
 8000778:	f040 80ac 	bne.w	80008d4 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800077c:	684c      	ldr	r4, [r1, #4]
 800077e:	f024 0c10 	bic.w	ip, r4, #16
 8000782:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000786:	2e01      	cmp	r6, #1
 8000788:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800078c:	d812      	bhi.n	80007b4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800078e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000790:	2603      	movs	r6, #3
 8000792:	fa06 f60e 	lsl.w	r6, r6, lr
 8000796:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800079a:	68ce      	ldr	r6, [r1, #12]
 800079c:	fa06 f60e 	lsl.w	r6, r6, lr
 80007a0:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80007a2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80007a4:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007a6:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007aa:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007ae:	409e      	lsls	r6, r3
 80007b0:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80007b2:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007b4:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80007b6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007b8:	fa06 f60e 	lsl.w	r6, r6, lr
 80007bc:	43f6      	mvns	r6, r6
 80007be:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007c2:	688f      	ldr	r7, [r1, #8]
 80007c4:	fa07 f70e 	lsl.w	r7, r7, lr
 80007c8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007cc:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80007d0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007d2:	d116      	bne.n	8000802 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80007d4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007d8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007dc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007e0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007e8:	f04f 0c0f 	mov.w	ip, #15
 80007ec:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007f0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007f4:	690f      	ldr	r7, [r1, #16]
 80007f6:	fa07 f70b 	lsl.w	r7, r7, fp
 80007fa:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007fe:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000802:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000804:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000806:	f004 0703 	and.w	r7, r4, #3
 800080a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800080e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000812:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000814:	00e6      	lsls	r6, r4, #3
 8000816:	d55d      	bpl.n	80008d4 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000818:	f04f 0b00 	mov.w	fp, #0
 800081c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000820:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000824:	4e36      	ldr	r6, [pc, #216]	; (8000900 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800082a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800082e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000832:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000836:	9703      	str	r7, [sp, #12]
 8000838:	9f03      	ldr	r7, [sp, #12]
 800083a:	f023 0703 	bic.w	r7, r3, #3
 800083e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000842:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000846:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800084a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800084e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000852:	f04f 0e0f 	mov.w	lr, #15
 8000856:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800085a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800085c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000860:	d03f      	beq.n	80008e2 <HAL_GPIO_Init+0x18a>
 8000862:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000866:	42b0      	cmp	r0, r6
 8000868:	d03d      	beq.n	80008e6 <HAL_GPIO_Init+0x18e>
 800086a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800086e:	42b0      	cmp	r0, r6
 8000870:	d03b      	beq.n	80008ea <HAL_GPIO_Init+0x192>
 8000872:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000876:	42b0      	cmp	r0, r6
 8000878:	d039      	beq.n	80008ee <HAL_GPIO_Init+0x196>
 800087a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800087e:	42b0      	cmp	r0, r6
 8000880:	d037      	beq.n	80008f2 <HAL_GPIO_Init+0x19a>
 8000882:	4548      	cmp	r0, r9
 8000884:	d037      	beq.n	80008f6 <HAL_GPIO_Init+0x19e>
 8000886:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800088a:	42b0      	cmp	r0, r6
 800088c:	bf14      	ite	ne
 800088e:	2607      	movne	r6, #7
 8000890:	2606      	moveq	r6, #6
 8000892:	fa06 f60c 	lsl.w	r6, r6, ip
 8000896:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800089a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800089c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800089e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008a0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008a4:	bf0c      	ite	eq
 80008a6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008a8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80008aa:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80008ac:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ae:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008b2:	bf0c      	ite	eq
 80008b4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008b6:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80008b8:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008ba:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008bc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008c0:	bf0c      	ite	eq
 80008c2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80008c4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80008c6:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80008c8:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ca:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008cc:	bf54      	ite	pl
 80008ce:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80008d0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80008d2:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d4:	3301      	adds	r3, #1
 80008d6:	2b10      	cmp	r3, #16
 80008d8:	f47f af49 	bne.w	800076e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008dc:	b005      	add	sp, #20
 80008de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008e2:	465e      	mov	r6, fp
 80008e4:	e7d5      	b.n	8000892 <HAL_GPIO_Init+0x13a>
 80008e6:	2601      	movs	r6, #1
 80008e8:	e7d3      	b.n	8000892 <HAL_GPIO_Init+0x13a>
 80008ea:	2602      	movs	r6, #2
 80008ec:	e7d1      	b.n	8000892 <HAL_GPIO_Init+0x13a>
 80008ee:	2603      	movs	r6, #3
 80008f0:	e7cf      	b.n	8000892 <HAL_GPIO_Init+0x13a>
 80008f2:	2604      	movs	r6, #4
 80008f4:	e7cd      	b.n	8000892 <HAL_GPIO_Init+0x13a>
 80008f6:	2605      	movs	r6, #5
 80008f8:	e7cb      	b.n	8000892 <HAL_GPIO_Init+0x13a>
 80008fa:	bf00      	nop
 80008fc:	40013c00 	.word	0x40013c00
 8000900:	40020000 	.word	0x40020000
 8000904:	40023800 	.word	0x40023800
 8000908:	40021400 	.word	0x40021400

0800090c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800090c:	6903      	ldr	r3, [r0, #16]
 800090e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000910:	bf14      	ite	ne
 8000912:	2001      	movne	r0, #1
 8000914:	2000      	moveq	r0, #0
 8000916:	4770      	bx	lr

08000918 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000918:	b10a      	cbz	r2, 800091e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800091a:	6181      	str	r1, [r0, #24]
 800091c:	4770      	bx	lr
 800091e:	0409      	lsls	r1, r1, #16
 8000920:	e7fb      	b.n	800091a <HAL_GPIO_WritePin+0x2>
	...

08000924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000928:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800092a:	4604      	mov	r4, r0
 800092c:	b910      	cbnz	r0, 8000934 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800092e:	2001      	movs	r0, #1
 8000930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000934:	4b44      	ldr	r3, [pc, #272]	; (8000a48 <HAL_RCC_ClockConfig+0x124>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	f002 020f 	and.w	r2, r2, #15
 800093c:	428a      	cmp	r2, r1
 800093e:	d329      	bcc.n	8000994 <HAL_RCC_ClockConfig+0x70>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000940:	6821      	ldr	r1, [r4, #0]
 8000942:	078f      	lsls	r7, r1, #30
 8000944:	d42e      	bmi.n	80009a4 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000946:	07c8      	lsls	r0, r1, #31
 8000948:	d441      	bmi.n	80009ce <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800094a:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <HAL_RCC_ClockConfig+0x124>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	f002 020f 	and.w	r2, r2, #15
 8000952:	4295      	cmp	r5, r2
 8000954:	d367      	bcc.n	8000a26 <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000956:	6822      	ldr	r2, [r4, #0]
 8000958:	0751      	lsls	r1, r2, #29
 800095a:	d46d      	bmi.n	8000a38 <HAL_RCC_ClockConfig+0x114>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800095c:	0713      	lsls	r3, r2, #28
 800095e:	d507      	bpl.n	8000970 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000960:	4a3a      	ldr	r2, [pc, #232]	; (8000a4c <HAL_RCC_ClockConfig+0x128>)
 8000962:	6921      	ldr	r1, [r4, #16]
 8000964:	6893      	ldr	r3, [r2, #8]
 8000966:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800096a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800096e:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000970:	f000 f894 	bl	8000a9c <HAL_RCC_GetSysClockFreq>
 8000974:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <HAL_RCC_ClockConfig+0x128>)
 8000976:	4a36      	ldr	r2, [pc, #216]	; (8000a50 <HAL_RCC_ClockConfig+0x12c>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	40d8      	lsrs	r0, r3
 8000982:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <HAL_RCC_ClockConfig+0x130>)
 8000984:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <HAL_RCC_ClockConfig+0x134>)
 8000988:	6818      	ldr	r0, [r3, #0]
 800098a:	f7ff fe19 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 800098e:	2000      	movs	r0, #0
 8000990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000994:	b2ca      	uxtb	r2, r1
 8000996:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	4299      	cmp	r1, r3
 80009a0:	d1c5      	bne.n	800092e <HAL_RCC_ClockConfig+0xa>
 80009a2:	e7cd      	b.n	8000940 <HAL_RCC_ClockConfig+0x1c>
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009a6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80009aa:	bf1e      	ittt	ne
 80009ac:	689a      	ldrne	r2, [r3, #8]
 80009ae:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80009b2:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009b4:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80009b6:	bf42      	ittt	mi
 80009b8:	689a      	ldrmi	r2, [r3, #8]
 80009ba:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80009be:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	68a0      	ldr	r0, [r4, #8]
 80009c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009c8:	4302      	orrs	r2, r0
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	e7bb      	b.n	8000946 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009ce:	6862      	ldr	r2, [r4, #4]
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_RCC_ClockConfig+0x128>)
 80009d2:	2a01      	cmp	r2, #1
 80009d4:	d11d      	bne.n	8000a12 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009dc:	d0a7      	beq.n	800092e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009de:	4e1b      	ldr	r6, [pc, #108]	; (8000a4c <HAL_RCC_ClockConfig+0x128>)
 80009e0:	68b3      	ldr	r3, [r6, #8]
 80009e2:	f023 0303 	bic.w	r3, r3, #3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80009ea:	f7ff fe33 	bl	8000654 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ee:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80009f2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009f4:	68b3      	ldr	r3, [r6, #8]
 80009f6:	6862      	ldr	r2, [r4, #4]
 80009f8:	f003 030c 	and.w	r3, r3, #12
 80009fc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000a00:	d0a3      	beq.n	800094a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a02:	f7ff fe27 	bl	8000654 <HAL_GetTick>
 8000a06:	1bc0      	subs	r0, r0, r7
 8000a08:	4540      	cmp	r0, r8
 8000a0a:	d9f3      	bls.n	80009f4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000a0c:	2003      	movs	r0, #3
}
 8000a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000a12:	1e91      	subs	r1, r2, #2
 8000a14:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a16:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000a18:	d802      	bhi.n	8000a20 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a1a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a1e:	e7dd      	b.n	80009dc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a20:	f013 0f02 	tst.w	r3, #2
 8000a24:	e7da      	b.n	80009dc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a26:	b2ea      	uxtb	r2, r5
 8000a28:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 030f 	and.w	r3, r3, #15
 8000a30:	429d      	cmp	r5, r3
 8000a32:	f47f af7c 	bne.w	800092e <HAL_RCC_ClockConfig+0xa>
 8000a36:	e78e      	b.n	8000956 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a38:	4904      	ldr	r1, [pc, #16]	; (8000a4c <HAL_RCC_ClockConfig+0x128>)
 8000a3a:	68e0      	ldr	r0, [r4, #12]
 8000a3c:	688b      	ldr	r3, [r1, #8]
 8000a3e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000a42:	4303      	orrs	r3, r0
 8000a44:	608b      	str	r3, [r1, #8]
 8000a46:	e789      	b.n	800095c <HAL_RCC_ClockConfig+0x38>
 8000a48:	40023c00 	.word	0x40023c00
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	08003250 	.word	0x08003250
 8000a54:	20000020 	.word	0x20000020
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000a66:	5cd3      	ldrb	r3, [r2, r3]
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a6a:	6810      	ldr	r0, [r2, #0]
}
 8000a6c:	40d8      	lsrs	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	40023800 	.word	0x40023800
 8000a74:	08003260 	.word	0x08003260
 8000a78:	20000020 	.word	0x20000020

08000a7c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a8a:	6810      	ldr	r0, [r2, #0]
}
 8000a8c:	40d8      	lsrs	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	40023800 	.word	0x40023800
 8000a94:	08003260 	.word	0x08003260
 8000a98:	20000020 	.word	0x20000020

08000a9c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a9c:	4920      	ldr	r1, [pc, #128]	; (8000b20 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000a9e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000aa0:	688b      	ldr	r3, [r1, #8]
 8000aa2:	f003 030c 	and.w	r3, r3, #12
 8000aa6:	2b08      	cmp	r3, #8
 8000aa8:	d007      	beq.n	8000aba <HAL_RCC_GetSysClockFreq+0x1e>
 8000aaa:	2b0c      	cmp	r3, #12
 8000aac:	d020      	beq.n	8000af0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000aae:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x88>)
 8000ab0:	481d      	ldr	r0, [pc, #116]	; (8000b28 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf18      	it	ne
 8000ab6:	4610      	movne	r0, r2
 8000ab8:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000aba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000abc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000abe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ac0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ac4:	bf14      	ite	ne
 8000ac6:	4818      	ldrne	r0, [pc, #96]	; (8000b28 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ac8:	4816      	ldreq	r0, [pc, #88]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ace:	bf18      	it	ne
 8000ad0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ad2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ad6:	fba1 0100 	umull	r0, r1, r1, r0
 8000ada:	f7ff fbe9 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_RCC_GetSysClockFreq+0x84>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000aea:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000aee:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000af0:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000af2:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000af4:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000af6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000afa:	bf14      	ite	ne
 8000afc:	480a      	ldrne	r0, [pc, #40]	; (8000b28 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000afe:	4809      	ldreq	r0, [pc, #36]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b00:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b04:	bf18      	it	ne
 8000b06:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b0c:	fba1 0100 	umull	r0, r1, r1, r0
 8000b10:	f7ff fbce 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <HAL_RCC_GetSysClockFreq+0x84>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000b1c:	e7e5      	b.n	8000aea <HAL_RCC_GetSysClockFreq+0x4e>
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	00f42400 	.word	0x00f42400
 8000b28:	007a1200 	.word	0x007a1200

08000b2c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b2c:	6803      	ldr	r3, [r0, #0]
{
 8000b2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b32:	07df      	lsls	r7, r3, #31
{
 8000b34:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b36:	d410      	bmi.n	8000b5a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	079e      	lsls	r6, r3, #30
 8000b3c:	d467      	bmi.n	8000c0e <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	071a      	lsls	r2, r3, #28
 8000b42:	f100 80b2 	bmi.w	8000caa <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	075b      	lsls	r3, r3, #29
 8000b4a:	f100 80d0 	bmi.w	8000cee <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b4e:	69a2      	ldr	r2, [r4, #24]
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f040 8139 	bne.w	8000dc8 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000b56:	2000      	movs	r0, #0
 8000b58:	e01e      	b.n	8000b98 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000b5a:	4b97      	ldr	r3, [pc, #604]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	f002 020c 	and.w	r2, r2, #12
 8000b62:	2a04      	cmp	r2, #4
 8000b64:	d010      	beq.n	8000b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000b6c:	2a08      	cmp	r2, #8
 8000b6e:	d102      	bne.n	8000b76 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	025d      	lsls	r5, r3, #9
 8000b74:	d408      	bmi.n	8000b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b76:	4b90      	ldr	r3, [pc, #576]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b7e:	2a0c      	cmp	r2, #12
 8000b80:	d10d      	bne.n	8000b9e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	0250      	lsls	r0, r2, #9
 8000b86:	d50a      	bpl.n	8000b9e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b88:	4b8b      	ldr	r3, [pc, #556]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	0399      	lsls	r1, r3, #14
 8000b8e:	d5d3      	bpl.n	8000b38 <HAL_RCC_OscConfig+0xc>
 8000b90:	6863      	ldr	r3, [r4, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1d0      	bne.n	8000b38 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b96:	2001      	movs	r0, #1
}
 8000b98:	b002      	add	sp, #8
 8000b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b9e:	6862      	ldr	r2, [r4, #4]
 8000ba0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000ba4:	d111      	bne.n	8000bca <HAL_RCC_OscConfig+0x9e>
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bae:	f7ff fd51 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	4d81      	ldr	r5, [pc, #516]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000bb4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	039a      	lsls	r2, r3, #14
 8000bba:	d4bd      	bmi.n	8000b38 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bbc:	f7ff fd4a 	bl	8000654 <HAL_GetTick>
 8000bc0:	1b80      	subs	r0, r0, r6
 8000bc2:	2864      	cmp	r0, #100	; 0x64
 8000bc4:	d9f7      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	e7e6      	b.n	8000b98 <HAL_RCC_OscConfig+0x6c>
 8000bca:	4d7b      	ldr	r5, [pc, #492]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bcc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	d107      	bne.n	8000be4 <HAL_RCC_OscConfig+0xb8>
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd8:	602b      	str	r3, [r5, #0]
 8000bda:	682b      	ldr	r3, [r5, #0]
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be0:	602b      	str	r3, [r5, #0]
 8000be2:	e7e4      	b.n	8000bae <HAL_RCC_OscConfig+0x82>
 8000be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be8:	602b      	str	r3, [r5, #0]
 8000bea:	682b      	ldr	r3, [r5, #0]
 8000bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d1db      	bne.n	8000bae <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fd2d 	bl	8000654 <HAL_GetTick>
 8000bfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	039b      	lsls	r3, r3, #14
 8000c00:	d59a      	bpl.n	8000b38 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c02:	f7ff fd27 	bl	8000654 <HAL_GetTick>
 8000c06:	1b80      	subs	r0, r0, r6
 8000c08:	2864      	cmp	r0, #100	; 0x64
 8000c0a:	d9f7      	bls.n	8000bfc <HAL_RCC_OscConfig+0xd0>
 8000c0c:	e7db      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000c0e:	4b6a      	ldr	r3, [pc, #424]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	f012 0f0c 	tst.w	r2, #12
 8000c16:	d010      	beq.n	8000c3a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000c1e:	2a08      	cmp	r2, #8
 8000c20:	d102      	bne.n	8000c28 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	025f      	lsls	r7, r3, #9
 8000c26:	d508      	bpl.n	8000c3a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c28:	4a63      	ldr	r2, [pc, #396]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000c2a:	6893      	ldr	r3, [r2, #8]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000c30:	2b0c      	cmp	r3, #12
 8000c32:	d111      	bne.n	8000c58 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c34:	6853      	ldr	r3, [r2, #4]
 8000c36:	025e      	lsls	r6, r3, #9
 8000c38:	d40e      	bmi.n	8000c58 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c3a:	4b5f      	ldr	r3, [pc, #380]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	0795      	lsls	r5, r2, #30
 8000c40:	d502      	bpl.n	8000c48 <HAL_RCC_OscConfig+0x11c>
 8000c42:	68e2      	ldr	r2, [r4, #12]
 8000c44:	2a01      	cmp	r2, #1
 8000c46:	d1a6      	bne.n	8000b96 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	6921      	ldr	r1, [r4, #16]
 8000c4c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000c50:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000c54:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c56:	e772      	b.n	8000b3e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c58:	68e2      	ldr	r2, [r4, #12]
 8000c5a:	4b58      	ldr	r3, [pc, #352]	; (8000dbc <HAL_RCC_OscConfig+0x290>)
 8000c5c:	b1b2      	cbz	r2, 8000c8c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c62:	f7ff fcf7 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c66:	4d54      	ldr	r5, [pc, #336]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000c68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6a:	682b      	ldr	r3, [r5, #0]
 8000c6c:	0798      	lsls	r0, r3, #30
 8000c6e:	d507      	bpl.n	8000c80 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c70:	682b      	ldr	r3, [r5, #0]
 8000c72:	6922      	ldr	r2, [r4, #16]
 8000c74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c7c:	602b      	str	r3, [r5, #0]
 8000c7e:	e75e      	b.n	8000b3e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c80:	f7ff fce8 	bl	8000654 <HAL_GetTick>
 8000c84:	1b80      	subs	r0, r0, r6
 8000c86:	2802      	cmp	r0, #2
 8000c88:	d9ef      	bls.n	8000c6a <HAL_RCC_OscConfig+0x13e>
 8000c8a:	e79c      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000c8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c8e:	f7ff fce1 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c92:	4d49      	ldr	r5, [pc, #292]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000c94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c96:	682b      	ldr	r3, [r5, #0]
 8000c98:	0799      	lsls	r1, r3, #30
 8000c9a:	f57f af50 	bpl.w	8000b3e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c9e:	f7ff fcd9 	bl	8000654 <HAL_GetTick>
 8000ca2:	1b80      	subs	r0, r0, r6
 8000ca4:	2802      	cmp	r0, #2
 8000ca6:	d9f6      	bls.n	8000c96 <HAL_RCC_OscConfig+0x16a>
 8000ca8:	e78d      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000caa:	6962      	ldr	r2, [r4, #20]
 8000cac:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <HAL_RCC_OscConfig+0x294>)
 8000cae:	b17a      	cbz	r2, 8000cd0 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cb4:	f7ff fcce 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb8:	4d3f      	ldr	r5, [pc, #252]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000cba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cbc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cbe:	079f      	lsls	r7, r3, #30
 8000cc0:	f53f af41 	bmi.w	8000b46 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cc4:	f7ff fcc6 	bl	8000654 <HAL_GetTick>
 8000cc8:	1b80      	subs	r0, r0, r6
 8000cca:	2802      	cmp	r0, #2
 8000ccc:	d9f6      	bls.n	8000cbc <HAL_RCC_OscConfig+0x190>
 8000cce:	e77a      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000cd0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cd2:	f7ff fcbf 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd6:	4d38      	ldr	r5, [pc, #224]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000cd8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cda:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cdc:	0798      	lsls	r0, r3, #30
 8000cde:	f57f af32 	bpl.w	8000b46 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce2:	f7ff fcb7 	bl	8000654 <HAL_GetTick>
 8000ce6:	1b80      	subs	r0, r0, r6
 8000ce8:	2802      	cmp	r0, #2
 8000cea:	d9f6      	bls.n	8000cda <HAL_RCC_OscConfig+0x1ae>
 8000cec:	e76b      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000cf6:	d128      	bne.n	8000d4a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	9201      	str	r2, [sp, #4]
 8000cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d00:	641a      	str	r2, [r3, #64]	; 0x40
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d0c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0e:	4d2d      	ldr	r5, [pc, #180]	; (8000dc4 <HAL_RCC_OscConfig+0x298>)
 8000d10:	682b      	ldr	r3, [r5, #0]
 8000d12:	05d9      	lsls	r1, r3, #23
 8000d14:	d51b      	bpl.n	8000d4e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d16:	68a3      	ldr	r3, [r4, #8]
 8000d18:	4d27      	ldr	r5, [pc, #156]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d127      	bne.n	8000d6e <HAL_RCC_OscConfig+0x242>
 8000d1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d26:	f7ff fc95 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d2a:	4d23      	ldr	r5, [pc, #140]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000d2c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d34:	079b      	lsls	r3, r3, #30
 8000d36:	d539      	bpl.n	8000dac <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	f43f af08 	beq.w	8000b4e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d3e:	4a1e      	ldr	r2, [pc, #120]	; (8000db8 <HAL_RCC_OscConfig+0x28c>)
 8000d40:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	e701      	b.n	8000b4e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	e7df      	b.n	8000d0e <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d4e:	682b      	ldr	r3, [r5, #0]
 8000d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d54:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000d56:	f7ff fc7d 	bl	8000654 <HAL_GetTick>
 8000d5a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5c:	682b      	ldr	r3, [r5, #0]
 8000d5e:	05da      	lsls	r2, r3, #23
 8000d60:	d4d9      	bmi.n	8000d16 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d62:	f7ff fc77 	bl	8000654 <HAL_GetTick>
 8000d66:	1bc0      	subs	r0, r0, r7
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d9f7      	bls.n	8000d5c <HAL_RCC_OscConfig+0x230>
 8000d6c:	e72b      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d104      	bne.n	8000d7c <HAL_RCC_OscConfig+0x250>
 8000d72:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	672b      	str	r3, [r5, #112]	; 0x70
 8000d7a:	e7d0      	b.n	8000d1e <HAL_RCC_OscConfig+0x1f2>
 8000d7c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d7e:	f022 0201 	bic.w	r2, r2, #1
 8000d82:	672a      	str	r2, [r5, #112]	; 0x70
 8000d84:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d86:	f022 0204 	bic.w	r2, r2, #4
 8000d8a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1ca      	bne.n	8000d26 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8000d90:	f7ff fc60 	bl	8000654 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d94:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d98:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d9c:	0798      	lsls	r0, r3, #30
 8000d9e:	d5cb      	bpl.n	8000d38 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000da0:	f7ff fc58 	bl	8000654 <HAL_GetTick>
 8000da4:	1bc0      	subs	r0, r0, r7
 8000da6:	4540      	cmp	r0, r8
 8000da8:	d9f7      	bls.n	8000d9a <HAL_RCC_OscConfig+0x26e>
 8000daa:	e70c      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dac:	f7ff fc52 	bl	8000654 <HAL_GetTick>
 8000db0:	1bc0      	subs	r0, r0, r7
 8000db2:	4540      	cmp	r0, r8
 8000db4:	d9bd      	bls.n	8000d32 <HAL_RCC_OscConfig+0x206>
 8000db6:	e706      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	42470000 	.word	0x42470000
 8000dc0:	42470e80 	.word	0x42470e80
 8000dc4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dc8:	4d23      	ldr	r5, [pc, #140]	; (8000e58 <HAL_RCC_OscConfig+0x32c>)
 8000dca:	68ab      	ldr	r3, [r5, #8]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	f43f aee0 	beq.w	8000b96 <HAL_RCC_OscConfig+0x6a>
 8000dd6:	4e21      	ldr	r6, [pc, #132]	; (8000e5c <HAL_RCC_OscConfig+0x330>)
 8000dd8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dda:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ddc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dde:	d12d      	bne.n	8000e3c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8000de0:	f7ff fc38 	bl	8000654 <HAL_GetTick>
 8000de4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000de6:	682b      	ldr	r3, [r5, #0]
 8000de8:	0199      	lsls	r1, r3, #6
 8000dea:	d421      	bmi.n	8000e30 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dec:	6a22      	ldr	r2, [r4, #32]
 8000dee:	69e3      	ldr	r3, [r4, #28]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000df4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000df8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000dfa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000dfe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e00:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000e04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e06:	4c14      	ldr	r4, [pc, #80]	; (8000e58 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e08:	0852      	lsrs	r2, r2, #1
 8000e0a:	3a01      	subs	r2, #1
 8000e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e10:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e12:	2301      	movs	r3, #1
 8000e14:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e16:	f7ff fc1d 	bl	8000654 <HAL_GetTick>
 8000e1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	019a      	lsls	r2, r3, #6
 8000e20:	f53f ae99 	bmi.w	8000b56 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e24:	f7ff fc16 	bl	8000654 <HAL_GetTick>
 8000e28:	1b40      	subs	r0, r0, r5
 8000e2a:	2802      	cmp	r0, #2
 8000e2c:	d9f6      	bls.n	8000e1c <HAL_RCC_OscConfig+0x2f0>
 8000e2e:	e6ca      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e30:	f7ff fc10 	bl	8000654 <HAL_GetTick>
 8000e34:	1bc0      	subs	r0, r0, r7
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9d5      	bls.n	8000de6 <HAL_RCC_OscConfig+0x2ba>
 8000e3a:	e6c4      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fc0a 	bl	8000654 <HAL_GetTick>
 8000e40:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e42:	682b      	ldr	r3, [r5, #0]
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	f57f ae86 	bpl.w	8000b56 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e4a:	f7ff fc03 	bl	8000654 <HAL_GetTick>
 8000e4e:	1b00      	subs	r0, r0, r4
 8000e50:	2802      	cmp	r0, #2
 8000e52:	d9f6      	bls.n	8000e42 <HAL_RCC_OscConfig+0x316>
 8000e54:	e6b7      	b.n	8000bc6 <HAL_RCC_OscConfig+0x9a>
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	42470060 	.word	0x42470060

08000e60 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e60:	6a03      	ldr	r3, [r0, #32]
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e68:	6a03      	ldr	r3, [r0, #32]
{
 8000e6a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000e6e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e72:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e76:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000e78:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000e7a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000e7e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000e80:	4d0e      	ldr	r5, [pc, #56]	; (8000ebc <TIM_OC1_SetConfig+0x5c>)
 8000e82:	42a8      	cmp	r0, r5
 8000e84:	d002      	beq.n	8000e8c <TIM_OC1_SetConfig+0x2c>
 8000e86:	4e0e      	ldr	r6, [pc, #56]	; (8000ec0 <TIM_OC1_SetConfig+0x60>)
 8000e88:	42b0      	cmp	r0, r6
 8000e8a:	d110      	bne.n	8000eae <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000e8c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000e8e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000e92:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000e94:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e96:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000e9a:	d002      	beq.n	8000ea2 <TIM_OC1_SetConfig+0x42>
 8000e9c:	4d08      	ldr	r5, [pc, #32]	; (8000ec0 <TIM_OC1_SetConfig+0x60>)
 8000e9e:	42a8      	cmp	r0, r5
 8000ea0:	d105      	bne.n	8000eae <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000ea2:	694d      	ldr	r5, [r1, #20]
 8000ea4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000ea6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000eaa:	4335      	orrs	r5, r6
 8000eac:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000eae:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000eb0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000eb2:	684a      	ldr	r2, [r1, #4]
 8000eb4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000eb6:	6203      	str	r3, [r0, #32]
 8000eb8:	bd70      	pop	{r4, r5, r6, pc}
 8000eba:	bf00      	nop
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	40010400 	.word	0x40010400

08000ec4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000ec4:	6a03      	ldr	r3, [r0, #32]
 8000ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eca:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ecc:	6a03      	ldr	r3, [r0, #32]
{
 8000ece:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ed0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ed2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ed4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000ed6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000eda:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000edc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000ede:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000ee2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000ee6:	4d11      	ldr	r5, [pc, #68]	; (8000f2c <TIM_OC3_SetConfig+0x68>)
 8000ee8:	42a8      	cmp	r0, r5
 8000eea:	d003      	beq.n	8000ef4 <TIM_OC3_SetConfig+0x30>
 8000eec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ef0:	42a8      	cmp	r0, r5
 8000ef2:	d114      	bne.n	8000f1e <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ef4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000efa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000efe:	4d0b      	ldr	r5, [pc, #44]	; (8000f2c <TIM_OC3_SetConfig+0x68>)
 8000f00:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8000f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000f06:	d003      	beq.n	8000f10 <TIM_OC3_SetConfig+0x4c>
 8000f08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f0c:	42a8      	cmp	r0, r5
 8000f0e:	d106      	bne.n	8000f1e <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000f10:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000f12:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000f14:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000f18:	4335      	orrs	r5, r6
 8000f1a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f1e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000f20:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000f22:	684a      	ldr	r2, [r1, #4]
 8000f24:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f26:	6203      	str	r3, [r0, #32]
 8000f28:	bd70      	pop	{r4, r5, r6, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40010000 	.word	0x40010000

08000f30 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000f30:	6a03      	ldr	r3, [r0, #32]
 8000f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f36:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f38:	6a03      	ldr	r3, [r0, #32]
{
 8000f3a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000f3c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000f3e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000f40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000f42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000f46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000f4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000f50:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000f54:	4d08      	ldr	r5, [pc, #32]	; (8000f78 <TIM_OC4_SetConfig+0x48>)
 8000f56:	42a8      	cmp	r0, r5
 8000f58:	d003      	beq.n	8000f62 <TIM_OC4_SetConfig+0x32>
 8000f5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f5e:	42a8      	cmp	r0, r5
 8000f60:	d104      	bne.n	8000f6c <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000f62:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000f64:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000f68:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f6c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000f6e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000f70:	684a      	ldr	r2, [r1, #4]
 8000f72:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f74:	6203      	str	r3, [r0, #32]
 8000f76:	bd30      	pop	{r4, r5, pc}
 8000f78:	40010000 	.word	0x40010000

08000f7c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f7c:	6803      	ldr	r3, [r0, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	f042 0201 	orr.w	r2, r2, #1
 8000f84:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f8c:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8000f8e:	bf1e      	ittt	ne
 8000f90:	681a      	ldrne	r2, [r3, #0]
 8000f92:	f042 0201 	orrne.w	r2, r2, #1
 8000f96:	601a      	strne	r2, [r3, #0]
}
 8000f98:	2000      	movs	r0, #0
 8000f9a:	4770      	bx	lr

08000f9c <HAL_TIM_Encoder_Start>:
{
 8000f9c:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8000f9e:	b189      	cbz	r1, 8000fc4 <HAL_TIM_Encoder_Start+0x28>
 8000fa0:	2904      	cmp	r1, #4
 8000fa2:	d007      	beq.n	8000fb4 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000fa4:	6a1a      	ldr	r2, [r3, #32]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000fac:	6a1a      	ldr	r2, [r3, #32]
 8000fae:	f042 0201 	orr.w	r2, r2, #1
 8000fb2:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8000fb4:	6a1a      	ldr	r2, [r3, #32]
 8000fb6:	f022 0210 	bic.w	r2, r2, #16
 8000fba:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000fbc:	6a1a      	ldr	r2, [r3, #32]
 8000fbe:	f042 0210 	orr.w	r2, r2, #16
 8000fc2:	e006      	b.n	8000fd2 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8000fc4:	6a1a      	ldr	r2, [r3, #32]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000fcc:	6a1a      	ldr	r2, [r3, #32]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	2000      	movs	r0, #0
 8000fde:	4770      	bx	lr

08000fe0 <HAL_TIM_OC_DelayElapsedCallback>:
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_TIM_IC_CaptureCallback>:
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_TIM_TriggerCallback>:
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fe8:	6803      	ldr	r3, [r0, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	0791      	lsls	r1, r2, #30
{
 8000fee:	b510      	push	{r4, lr}
 8000ff0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ff2:	d50e      	bpl.n	8001012 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	0792      	lsls	r2, r2, #30
 8000ff8:	d50b      	bpl.n	8001012 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000ffa:	f06f 0202 	mvn.w	r2, #2
 8000ffe:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001000:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001002:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001004:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001006:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001008:	d077      	beq.n	80010fa <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800100a:	f7ff ffea 	bl	8000fe2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800100e:	2300      	movs	r3, #0
 8001010:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	0750      	lsls	r0, r2, #29
 8001018:	d510      	bpl.n	800103c <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	0751      	lsls	r1, r2, #29
 800101e:	d50d      	bpl.n	800103c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001020:	f06f 0204 	mvn.w	r2, #4
 8001024:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001026:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001028:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800102a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800102e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001030:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001032:	d068      	beq.n	8001106 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001034:	f7ff ffd5 	bl	8000fe2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001038:	2300      	movs	r3, #0
 800103a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	0712      	lsls	r2, r2, #28
 8001042:	d50f      	bpl.n	8001064 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	0710      	lsls	r0, r2, #28
 8001048:	d50c      	bpl.n	8001064 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800104a:	f06f 0208 	mvn.w	r2, #8
 800104e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001050:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001052:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001054:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001056:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001058:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800105a:	d05a      	beq.n	8001112 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800105c:	f7ff ffc1 	bl	8000fe2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001060:	2300      	movs	r3, #0
 8001062:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	06d2      	lsls	r2, r2, #27
 800106a:	d510      	bpl.n	800108e <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800106c:	68da      	ldr	r2, [r3, #12]
 800106e:	06d0      	lsls	r0, r2, #27
 8001070:	d50d      	bpl.n	800108e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001072:	f06f 0210 	mvn.w	r2, #16
 8001076:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001078:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800107a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800107c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001080:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001082:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001084:	d04b      	beq.n	800111e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001086:	f7ff ffac 	bl	8000fe2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800108a:	2300      	movs	r3, #0
 800108c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	07d1      	lsls	r1, r2, #31
 8001094:	d508      	bpl.n	80010a8 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	07d2      	lsls	r2, r2, #31
 800109a:	d505      	bpl.n	80010a8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800109c:	f06f 0201 	mvn.w	r2, #1
 80010a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80010a2:	4620      	mov	r0, r4
 80010a4:	f000 fec4 	bl	8001e30 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	0610      	lsls	r0, r2, #24
 80010ae:	d508      	bpl.n	80010c2 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	0611      	lsls	r1, r2, #24
 80010b4:	d505      	bpl.n	80010c2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80010ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80010bc:	4620      	mov	r0, r4
 80010be:	f000 fa24 	bl	800150a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	0652      	lsls	r2, r2, #25
 80010c8:	d508      	bpl.n	80010dc <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	0650      	lsls	r0, r2, #25
 80010ce:	d505      	bpl.n	80010dc <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80010d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80010d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80010d6:	4620      	mov	r0, r4
 80010d8:	f7ff ff85 	bl	8000fe6 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	0691      	lsls	r1, r2, #26
 80010e2:	d522      	bpl.n	800112a <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	0692      	lsls	r2, r2, #26
 80010e8:	d51f      	bpl.n	800112a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010ea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80010ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010f0:	611a      	str	r2, [r3, #16]
}
 80010f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80010f6:	f000 ba07 	b.w	8001508 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010fa:	f7ff ff71 	bl	8000fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010fe:	4620      	mov	r0, r4
 8001100:	f7ff ff70 	bl	8000fe4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001104:	e783      	b.n	800100e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001106:	f7ff ff6b 	bl	8000fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800110a:	4620      	mov	r0, r4
 800110c:	f7ff ff6a 	bl	8000fe4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001110:	e792      	b.n	8001038 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001112:	f7ff ff65 	bl	8000fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff ff64 	bl	8000fe4 <HAL_TIM_PWM_PulseFinishedCallback>
 800111c:	e7a0      	b.n	8001060 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800111e:	f7ff ff5f 	bl	8000fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001122:	4620      	mov	r0, r4
 8001124:	f7ff ff5e 	bl	8000fe4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001128:	e7af      	b.n	800108a <HAL_TIM_IRQHandler+0xa2>
 800112a:	bd10      	pop	{r4, pc}

0800112c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800112c:	4a30      	ldr	r2, [pc, #192]	; (80011f0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800112e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001130:	4290      	cmp	r0, r2
 8001132:	d012      	beq.n	800115a <TIM_Base_SetConfig+0x2e>
 8001134:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001138:	d00f      	beq.n	800115a <TIM_Base_SetConfig+0x2e>
 800113a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800113e:	4290      	cmp	r0, r2
 8001140:	d00b      	beq.n	800115a <TIM_Base_SetConfig+0x2e>
 8001142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001146:	4290      	cmp	r0, r2
 8001148:	d007      	beq.n	800115a <TIM_Base_SetConfig+0x2e>
 800114a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800114e:	4290      	cmp	r0, r2
 8001150:	d003      	beq.n	800115a <TIM_Base_SetConfig+0x2e>
 8001152:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001156:	4290      	cmp	r0, r2
 8001158:	d119      	bne.n	800118e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800115a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800115c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001160:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001162:	4a23      	ldr	r2, [pc, #140]	; (80011f0 <TIM_Base_SetConfig+0xc4>)
 8001164:	4290      	cmp	r0, r2
 8001166:	d029      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 8001168:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800116c:	d026      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 800116e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001172:	4290      	cmp	r0, r2
 8001174:	d022      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 8001176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800117a:	4290      	cmp	r0, r2
 800117c:	d01e      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 800117e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001182:	4290      	cmp	r0, r2
 8001184:	d01a      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 8001186:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800118a:	4290      	cmp	r0, r2
 800118c:	d016      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 800118e:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <TIM_Base_SetConfig+0xc8>)
 8001190:	4290      	cmp	r0, r2
 8001192:	d013      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 8001194:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001198:	4290      	cmp	r0, r2
 800119a:	d00f      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 800119c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a0:	4290      	cmp	r0, r2
 80011a2:	d00b      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 80011a4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80011a8:	4290      	cmp	r0, r2
 80011aa:	d007      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 80011ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b0:	4290      	cmp	r0, r2
 80011b2:	d003      	beq.n	80011bc <TIM_Base_SetConfig+0x90>
 80011b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b8:	4290      	cmp	r0, r2
 80011ba:	d103      	bne.n	80011c4 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80011be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011c2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011c4:	694a      	ldr	r2, [r1, #20]
 80011c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011ca:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80011cc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011ce:	688b      	ldr	r3, [r1, #8]
 80011d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80011d2:	680b      	ldr	r3, [r1, #0]
 80011d4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <TIM_Base_SetConfig+0xc4>)
 80011d8:	4298      	cmp	r0, r3
 80011da:	d003      	beq.n	80011e4 <TIM_Base_SetConfig+0xb8>
 80011dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011e0:	4298      	cmp	r0, r3
 80011e2:	d101      	bne.n	80011e8 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80011e4:	690b      	ldr	r3, [r1, #16]
 80011e6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80011e8:	2301      	movs	r3, #1
 80011ea:	6143      	str	r3, [r0, #20]
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40010000 	.word	0x40010000
 80011f4:	40014000 	.word	0x40014000

080011f8 <HAL_TIM_Base_Init>:
{
 80011f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80011fa:	4604      	mov	r4, r0
 80011fc:	b1a0      	cbz	r0, 8001228 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80011fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001202:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001206:	b91b      	cbnz	r3, 8001210 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001208:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800120c:	f001 fa12 	bl	8002634 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001210:	2302      	movs	r3, #2
 8001212:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001216:	6820      	ldr	r0, [r4, #0]
 8001218:	1d21      	adds	r1, r4, #4
 800121a:	f7ff ff87 	bl	800112c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800121e:	2301      	movs	r3, #1
 8001220:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001224:	2000      	movs	r0, #0
 8001226:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001228:	2001      	movs	r0, #1
}
 800122a:	bd10      	pop	{r4, pc}

0800122c <HAL_TIM_PWM_Init>:
{
 800122c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800122e:	4604      	mov	r4, r0
 8001230:	b1a0      	cbz	r0, 800125c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001232:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001236:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800123a:	b91b      	cbnz	r3, 8001244 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800123c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001240:	f001 f9b0 	bl	80025a4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001244:	2302      	movs	r3, #2
 8001246:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800124a:	6820      	ldr	r0, [r4, #0]
 800124c:	1d21      	adds	r1, r4, #4
 800124e:	f7ff ff6d 	bl	800112c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001252:	2301      	movs	r3, #1
 8001254:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001258:	2000      	movs	r0, #0
 800125a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800125c:	2001      	movs	r0, #1
}
 800125e:	bd10      	pop	{r4, pc}

08001260 <HAL_TIM_Encoder_Init>:
{
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	460c      	mov	r4, r1
  if (htim == NULL)
 8001264:	4605      	mov	r5, r0
 8001266:	2800      	cmp	r0, #0
 8001268:	d043      	beq.n	80012f2 <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 800126a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800126e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001272:	b91b      	cbnz	r3, 800127c <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001274:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001278:	f001 f9aa 	bl	80025d0 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800127c:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 800127e:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001280:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8001284:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001288:	6883      	ldr	r3, [r0, #8]
 800128a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800128e:	f023 0307 	bic.w	r3, r3, #7
 8001292:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001294:	f7ff ff4a 	bl	800112c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001298:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800129a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 800129c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800129e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80012a0:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 80012a2:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 80012a4:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80012a6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80012a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012ac:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80012b0:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80012b4:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80012b6:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80012ba:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80012bc:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80012c4:	68e1      	ldr	r1, [r4, #12]
 80012c6:	430b      	orrs	r3, r1
 80012c8:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80012ca:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80012ce:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80012d2:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80012d4:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80012d6:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80012da:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80012dc:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80012de:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80012e2:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80012e4:	4317      	orrs	r7, r2
  htim->State = HAL_TIM_STATE_READY;
 80012e6:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80012e8:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 80012ea:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80012ee:	2000      	movs	r0, #0
 80012f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80012f2:	2001      	movs	r0, #1
}
 80012f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080012f8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012f8:	6a03      	ldr	r3, [r0, #32]
 80012fa:	f023 0310 	bic.w	r3, r3, #16
 80012fe:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001300:	6a03      	ldr	r3, [r0, #32]
{
 8001302:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001304:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001306:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001308:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800130a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800130e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001312:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001314:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001318:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800131c:	4d10      	ldr	r5, [pc, #64]	; (8001360 <TIM_OC2_SetConfig+0x68>)
 800131e:	42a8      	cmp	r0, r5
 8001320:	d003      	beq.n	800132a <TIM_OC2_SetConfig+0x32>
 8001322:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001326:	42a8      	cmp	r0, r5
 8001328:	d114      	bne.n	8001354 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800132a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800132c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001330:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001334:	4d0a      	ldr	r5, [pc, #40]	; (8001360 <TIM_OC2_SetConfig+0x68>)
 8001336:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800133c:	d003      	beq.n	8001346 <TIM_OC2_SetConfig+0x4e>
 800133e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001342:	42a8      	cmp	r0, r5
 8001344:	d106      	bne.n	8001354 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001346:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001348:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800134a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800134e:	4335      	orrs	r5, r6
 8001350:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001354:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001356:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001358:	684a      	ldr	r2, [r1, #4]
 800135a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800135c:	6203      	str	r3, [r0, #32]
 800135e:	bd70      	pop	{r4, r5, r6, pc}
 8001360:	40010000 	.word	0x40010000

08001364 <HAL_TIM_PWM_ConfigChannel>:
{
 8001364:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001366:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800136a:	2b01      	cmp	r3, #1
{
 800136c:	4604      	mov	r4, r0
 800136e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001372:	d025      	beq.n	80013c0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001374:	2301      	movs	r3, #1
 8001376:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800137a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800137e:	2a0c      	cmp	r2, #12
 8001380:	d818      	bhi.n	80013b4 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001382:	e8df f002 	tbb	[pc, r2]
 8001386:	1707      	.short	0x1707
 8001388:	171e1717 	.word	0x171e1717
 800138c:	172f1717 	.word	0x172f1717
 8001390:	1717      	.short	0x1717
 8001392:	40          	.byte	0x40
 8001393:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001394:	6820      	ldr	r0, [r4, #0]
 8001396:	f7ff fd63 	bl	8000e60 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800139a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800139c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	f042 0208 	orr.w	r2, r2, #8
 80013a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013a6:	699a      	ldr	r2, [r3, #24]
 80013a8:	f022 0204 	bic.w	r2, r2, #4
 80013ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013b2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80013b4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80013b6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80013c0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80013c2:	6820      	ldr	r0, [r4, #0]
 80013c4:	f7ff ff98 	bl	80012f8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013ca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80013d4:	699a      	ldr	r2, [r3, #24]
 80013d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013e2:	e7e6      	b.n	80013b2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80013e4:	6820      	ldr	r0, [r4, #0]
 80013e6:	f7ff fd6d 	bl	8000ec4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013ea:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80013ec:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013ee:	69da      	ldr	r2, [r3, #28]
 80013f0:	f042 0208 	orr.w	r2, r2, #8
 80013f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	f022 0204 	bic.w	r2, r2, #4
 80013fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80013fe:	69da      	ldr	r2, [r3, #28]
 8001400:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001402:	61da      	str	r2, [r3, #28]
      break;
 8001404:	e7d6      	b.n	80013b4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001406:	6820      	ldr	r0, [r4, #0]
 8001408:	f7ff fd92 	bl	8000f30 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800140c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800140e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001410:	69da      	ldr	r2, [r3, #28]
 8001412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001416:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800141e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001420:	69da      	ldr	r2, [r3, #28]
 8001422:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001426:	e7ec      	b.n	8001402 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001428 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001428:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800142a:	f001 011f 	and.w	r1, r1, #31
{
 800142e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001430:	2401      	movs	r4, #1
 8001432:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001434:	ea23 0304 	bic.w	r3, r3, r4
 8001438:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800143a:	6a03      	ldr	r3, [r0, #32]
 800143c:	408a      	lsls	r2, r1
 800143e:	431a      	orrs	r2, r3
 8001440:	6202      	str	r2, [r0, #32]
 8001442:	bd10      	pop	{r4, pc}

08001444 <HAL_TIM_PWM_Start>:
{
 8001444:	b510      	push	{r4, lr}
 8001446:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001448:	2201      	movs	r2, #1
 800144a:	6800      	ldr	r0, [r0, #0]
 800144c:	f7ff ffec 	bl	8001428 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <HAL_TIM_PWM_Start+0x3c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d00e      	beq.n	8001476 <HAL_TIM_PWM_Start+0x32>
 8001458:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800145c:	4293      	cmp	r3, r2
 800145e:	d00a      	beq.n	8001476 <HAL_TIM_PWM_Start+0x32>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001466:	2a06      	cmp	r2, #6
 8001468:	d003      	beq.n	8001472 <HAL_TIM_PWM_Start+0x2e>
    __HAL_TIM_ENABLE(htim);
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]
}
 8001472:	2000      	movs	r0, #0
 8001474:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8001476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
 800147e:	e7ef      	b.n	8001460 <HAL_TIM_PWM_Start+0x1c>
 8001480:	40010000 	.word	0x40010000

08001484 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001484:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001488:	2b01      	cmp	r3, #1
{
 800148a:	b530      	push	{r4, r5, lr}
 800148c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001490:	d035      	beq.n	80014fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001492:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001496:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001498:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800149a:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800149c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 80014a0:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014a2:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 80014a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80014a8:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80014aa:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014ac:	4c15      	ldr	r4, [pc, #84]	; (8001504 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	d01a      	beq.n	80014e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b6:	d017      	beq.n	80014e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014b8:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80014bc:	42a3      	cmp	r3, r4
 80014be:	d013      	beq.n	80014e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014c4:	42a3      	cmp	r3, r4
 80014c6:	d00f      	beq.n	80014e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014cc:	42a3      	cmp	r3, r4
 80014ce:	d00b      	beq.n	80014e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014d0:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80014d4:	42a3      	cmp	r3, r4
 80014d6:	d007      	beq.n	80014e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014d8:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80014dc:	42a3      	cmp	r3, r4
 80014de:	d003      	beq.n	80014e8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80014e0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80014e4:	42a3      	cmp	r3, r4
 80014e6:	d104      	bne.n	80014f2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014e8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80014ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014ee:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80014f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014f8:	2300      	movs	r3, #0
 80014fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80014fe:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001500:	bd30      	pop	{r4, r5, pc}
 8001502:	bf00      	nop
 8001504:	40010000 	.word	0x40010000

08001508 <HAL_TIMEx_CommutCallback>:
 8001508:	4770      	bx	lr

0800150a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800150a:	4770      	bx	lr

0800150c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800150c:	6803      	ldr	r3, [r0, #0]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001514:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800151e:	2320      	movs	r3, #32
 8001520:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001524:	4770      	bx	lr
	...

08001528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001528:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800152a:	6803      	ldr	r3, [r0, #0]
 800152c:	68c1      	ldr	r1, [r0, #12]
 800152e:	691a      	ldr	r2, [r3, #16]
{
 8001530:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001532:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001536:	430a      	orrs	r2, r1
 8001538:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800153a:	6925      	ldr	r5, [r4, #16]
 800153c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800153e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001540:	69c0      	ldr	r0, [r0, #28]
 8001542:	432a      	orrs	r2, r5
 8001544:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001546:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800154a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800154c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001550:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001552:	430a      	orrs	r2, r1
 8001554:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	69a1      	ldr	r1, [r4, #24]
 800155a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800155e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001560:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001564:	615a      	str	r2, [r3, #20]
 8001566:	4a25      	ldr	r2, [pc, #148]	; (80015fc <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001568:	d129      	bne.n	80015be <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800156a:	4293      	cmp	r3, r2
 800156c:	d003      	beq.n	8001576 <UART_SetConfig+0x4e>
 800156e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001572:	4293      	cmp	r3, r2
 8001574:	d120      	bne.n	80015b8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001576:	f7ff fa81 	bl	8000a7c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800157a:	6862      	ldr	r2, [r4, #4]
 800157c:	6825      	ldr	r5, [r4, #0]
 800157e:	1892      	adds	r2, r2, r2
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	f04f 0119 	mov.w	r1, #25
 8001588:	415b      	adcs	r3, r3
 800158a:	fba0 0101 	umull	r0, r1, r0, r1
 800158e:	f7fe fe8f 	bl	80002b0 <__aeabi_uldivmod>
 8001592:	2164      	movs	r1, #100	; 0x64
 8001594:	fbb0 f4f1 	udiv	r4, r0, r1
 8001598:	fb01 0314 	mls	r3, r1, r4, r0
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	3332      	adds	r3, #50	; 0x32
 80015a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a4:	f003 0207 	and.w	r2, r3, #7
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80015ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80015b2:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015b4:	60ab      	str	r3, [r5, #8]
 80015b6:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80015b8:	f7ff fa50 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 80015bc:	e7dd      	b.n	800157a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015be:	4293      	cmp	r3, r2
 80015c0:	d002      	beq.n	80015c8 <UART_SetConfig+0xa0>
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <UART_SetConfig+0xd8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d116      	bne.n	80015f6 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80015c8:	f7ff fa58 	bl	8000a7c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015cc:	6863      	ldr	r3, [r4, #4]
 80015ce:	6825      	ldr	r5, [r4, #0]
 80015d0:	2119      	movs	r1, #25
 80015d2:	009a      	lsls	r2, r3, #2
 80015d4:	fba0 0101 	umull	r0, r1, r0, r1
 80015d8:	0f9b      	lsrs	r3, r3, #30
 80015da:	f7fe fe69 	bl	80002b0 <__aeabi_uldivmod>
 80015de:	2264      	movs	r2, #100	; 0x64
 80015e0:	fbb0 f1f2 	udiv	r1, r0, r2
 80015e4:	fb02 0311 	mls	r3, r2, r1, r0
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	3332      	adds	r3, #50	; 0x32
 80015ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80015f0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80015f4:	e7de      	b.n	80015b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80015f6:	f7ff fa31 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 80015fa:	e7e7      	b.n	80015cc <UART_SetConfig+0xa4>
 80015fc:	40011000 	.word	0x40011000
 8001600:	40011400 	.word	0x40011400

08001604 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	4604      	mov	r4, r0
 8001608:	460e      	mov	r6, r1
 800160a:	4617      	mov	r7, r2
 800160c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800160e:	6821      	ldr	r1, [r4, #0]
 8001610:	680b      	ldr	r3, [r1, #0]
 8001612:	ea36 0303 	bics.w	r3, r6, r3
 8001616:	d101      	bne.n	800161c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001618:	2000      	movs	r0, #0
}
 800161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800161c:	1c6b      	adds	r3, r5, #1
 800161e:	d0f7      	beq.n	8001610 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001620:	b995      	cbnz	r5, 8001648 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800162a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001634:	2320      	movs	r3, #32
 8001636:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800163a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800163e:	2300      	movs	r3, #0
 8001640:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001644:	2003      	movs	r0, #3
 8001646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001648:	f7ff f804 	bl	8000654 <HAL_GetTick>
 800164c:	1bc0      	subs	r0, r0, r7
 800164e:	4285      	cmp	r5, r0
 8001650:	d2dd      	bcs.n	800160e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001652:	e7e6      	b.n	8001622 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001654 <HAL_UART_Init>:
{
 8001654:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001656:	4604      	mov	r4, r0
 8001658:	b340      	cbz	r0, 80016ac <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800165a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800165e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001662:	b91b      	cbnz	r3, 800166c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001664:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001668:	f001 f8b6 	bl	80027d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800166c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800166e:	2324      	movs	r3, #36	; 0x24
 8001670:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001674:	68d3      	ldr	r3, [r2, #12]
 8001676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800167a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff ff53 	bl	8001528 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800168a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001692:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800169a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800169c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800169e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80016a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80016a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80016aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
}
 80016ae:	bd10      	pop	{r4, pc}

080016b0 <HAL_UART_Transmit>:
{
 80016b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016b4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80016b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016ba:	2b20      	cmp	r3, #32
{
 80016bc:	4604      	mov	r4, r0
 80016be:	460d      	mov	r5, r1
 80016c0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80016c2:	d151      	bne.n	8001768 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d04c      	beq.n	8001762 <HAL_UART_Transmit+0xb2>
 80016c8:	2a00      	cmp	r2, #0
 80016ca:	d04a      	beq.n	8001762 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80016cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d049      	beq.n	8001768 <HAL_UART_Transmit+0xb8>
 80016d4:	2301      	movs	r3, #1
 80016d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016da:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016de:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016e0:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016e4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80016e8:	f7fe ffb4 	bl	8000654 <HAL_GetTick>
    huart->TxXferSize = Size;
 80016ec:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80016f0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80016f2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80016f6:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80016fa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b95b      	cbnz	r3, 8001718 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4632      	mov	r2, r6
 8001704:	2140      	movs	r1, #64	; 0x40
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff ff7c 	bl	8001604 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800170c:	b9a0      	cbnz	r0, 8001738 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 800170e:	2320      	movs	r3, #32
 8001710:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8001718:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800171a:	3b01      	subs	r3, #1
 800171c:	b29b      	uxth	r3, r3
 800171e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001720:	68a3      	ldr	r3, [r4, #8]
 8001722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001726:	4632      	mov	r2, r6
 8001728:	463b      	mov	r3, r7
 800172a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800172e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001730:	d10e      	bne.n	8001750 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001732:	f7ff ff67 	bl	8001604 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001736:	b110      	cbz	r0, 800173e <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001738:	2003      	movs	r0, #3
 800173a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800173e:	882b      	ldrh	r3, [r5, #0]
 8001740:	6822      	ldr	r2, [r4, #0]
 8001742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001746:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001748:	6923      	ldr	r3, [r4, #16]
 800174a:	b943      	cbnz	r3, 800175e <HAL_UART_Transmit+0xae>
          pData += 2U;
 800174c:	3502      	adds	r5, #2
 800174e:	e7d4      	b.n	80016fa <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001750:	f7ff ff58 	bl	8001604 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001754:	2800      	cmp	r0, #0
 8001756:	d1ef      	bne.n	8001738 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	782a      	ldrb	r2, [r5, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	3501      	adds	r5, #1
 8001760:	e7cb      	b.n	80016fa <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001762:	2001      	movs	r0, #1
 8001764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001768:	2002      	movs	r0, #2
}
 800176a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800176e <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800176e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001772:	2b20      	cmp	r3, #32
 8001774:	d118      	bne.n	80017a8 <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8001776:	b1a9      	cbz	r1, 80017a4 <HAL_UART_Transmit_IT+0x36>
 8001778:	b1a2      	cbz	r2, 80017a4 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 800177a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800177e:	2b01      	cmp	r3, #1
 8001780:	d012      	beq.n	80017a8 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001782:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 8001784:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001786:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001788:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800178a:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800178c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800178e:	2221      	movs	r2, #33	; 0x21
 8001790:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001794:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8001796:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800179a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800179e:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80017a0:	4618      	mov	r0, r3
 80017a2:	4770      	bx	lr
      return HAL_ERROR;
 80017a4:	2001      	movs	r0, #1
 80017a6:	4770      	bx	lr
    return HAL_BUSY;
 80017a8:	2002      	movs	r0, #2
}
 80017aa:	4770      	bx	lr

080017ac <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80017ac:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	d120      	bne.n	80017f6 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80017b4:	b1e9      	cbz	r1, 80017f2 <HAL_UART_Receive_IT+0x46>
 80017b6:	b1e2      	cbz	r2, 80017f2 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80017b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d01a      	beq.n	80017f6 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80017c0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80017c2:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017c4:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017c6:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017ca:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80017ce:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80017d0:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80017d2:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80017d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80017d8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80017dc:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80017de:	6951      	ldr	r1, [r2, #20]
 80017e0:	f041 0101 	orr.w	r1, r1, #1
 80017e4:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80017e6:	68d1      	ldr	r1, [r2, #12]
 80017e8:	f041 0120 	orr.w	r1, r1, #32
 80017ec:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80017ee:	4618      	mov	r0, r3
 80017f0:	4770      	bx	lr
      return HAL_ERROR;
 80017f2:	2001      	movs	r0, #1
 80017f4:	4770      	bx	lr
    return HAL_BUSY;
 80017f6:	2002      	movs	r0, #2
}
 80017f8:	4770      	bx	lr

080017fa <HAL_UART_TxCpltCallback>:
 80017fa:	4770      	bx	lr

080017fc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80017fc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001800:	2b22      	cmp	r3, #34	; 0x22
{
 8001802:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001804:	d136      	bne.n	8001874 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001806:	6883      	ldr	r3, [r0, #8]
 8001808:	6901      	ldr	r1, [r0, #16]
 800180a:	6802      	ldr	r2, [r0, #0]
 800180c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001810:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001812:	d123      	bne.n	800185c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001814:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001816:	b9e9      	cbnz	r1, 8001854 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800181c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001820:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001822:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001824:	3c01      	subs	r4, #1
 8001826:	b2a4      	uxth	r4, r4
 8001828:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800182a:	b98c      	cbnz	r4, 8001850 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800182c:	6803      	ldr	r3, [r0, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	f022 0220 	bic.w	r2, r2, #32
 8001834:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001846:	2320      	movs	r3, #32
 8001848:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800184c:	f000 fa4a 	bl	8001ce4 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001850:	2000      	movs	r0, #0
}
 8001852:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f823 2b01 	strh.w	r2, [r3], #1
 800185a:	e7e1      	b.n	8001820 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800185c:	b921      	cbnz	r1, 8001868 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800185e:	1c59      	adds	r1, r3, #1
 8001860:	6852      	ldr	r2, [r2, #4]
 8001862:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e7dc      	b.n	8001822 <UART_Receive_IT+0x26>
 8001868:	6852      	ldr	r2, [r2, #4]
 800186a:	1c59      	adds	r1, r3, #1
 800186c:	6281      	str	r1, [r0, #40]	; 0x28
 800186e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001872:	e7f7      	b.n	8001864 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001874:	2002      	movs	r0, #2
 8001876:	bd10      	pop	{r4, pc}

08001878 <HAL_UART_ErrorCallback>:
 8001878:	4770      	bx	lr
	...

0800187c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800187c:	6803      	ldr	r3, [r0, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001880:	68d9      	ldr	r1, [r3, #12]
{
 8001882:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001884:	0716      	lsls	r6, r2, #28
{
 8001886:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001888:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800188a:	d107      	bne.n	800189c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800188c:	0696      	lsls	r6, r2, #26
 800188e:	d55c      	bpl.n	800194a <HAL_UART_IRQHandler+0xce>
 8001890:	068d      	lsls	r5, r1, #26
 8001892:	d55a      	bpl.n	800194a <HAL_UART_IRQHandler+0xce>
}
 8001894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001898:	f7ff bfb0 	b.w	80017fc <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800189c:	f015 0501 	ands.w	r5, r5, #1
 80018a0:	d102      	bne.n	80018a8 <HAL_UART_IRQHandler+0x2c>
 80018a2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80018a6:	d050      	beq.n	800194a <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80018a8:	07d0      	lsls	r0, r2, #31
 80018aa:	d505      	bpl.n	80018b8 <HAL_UART_IRQHandler+0x3c>
 80018ac:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018ae:	bf42      	ittt	mi
 80018b0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80018b2:	f043 0301 	orrmi.w	r3, r3, #1
 80018b6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018b8:	0756      	lsls	r6, r2, #29
 80018ba:	d504      	bpl.n	80018c6 <HAL_UART_IRQHandler+0x4a>
 80018bc:	b11d      	cbz	r5, 80018c6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80018be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018c6:	0790      	lsls	r0, r2, #30
 80018c8:	d504      	bpl.n	80018d4 <HAL_UART_IRQHandler+0x58>
 80018ca:	b11d      	cbz	r5, 80018d4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80018d4:	0713      	lsls	r3, r2, #28
 80018d6:	d506      	bpl.n	80018e6 <HAL_UART_IRQHandler+0x6a>
 80018d8:	068e      	lsls	r6, r1, #26
 80018da:	d400      	bmi.n	80018de <HAL_UART_IRQHandler+0x62>
 80018dc:	b11d      	cbz	r5, 80018e6 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80018de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d066      	beq.n	80019ba <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018ec:	0695      	lsls	r5, r2, #26
 80018ee:	d504      	bpl.n	80018fa <HAL_UART_IRQHandler+0x7e>
 80018f0:	0688      	lsls	r0, r1, #26
 80018f2:	d502      	bpl.n	80018fa <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff ff81 	bl	80017fc <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80018fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001900:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001902:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001904:	d402      	bmi.n	800190c <HAL_UART_IRQHandler+0x90>
 8001906:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800190a:	d01a      	beq.n	8001942 <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 800190c:	f7ff fdfe 	bl	800150c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	0652      	lsls	r2, r2, #25
 8001916:	d510      	bpl.n	800193a <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001918:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800191a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800191c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001920:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001922:	b150      	cbz	r0, 800193a <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <HAL_UART_IRQHandler+0x140>)
 8001926:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001928:	f7fe ff04 	bl	8000734 <HAL_DMA_Abort_IT>
 800192c:	2800      	cmp	r0, #0
 800192e:	d044      	beq.n	80019ba <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001930:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001936:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001938:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800193a:	4620      	mov	r0, r4
 800193c:	f7ff ff9c 	bl	8001878 <HAL_UART_ErrorCallback>
 8001940:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001942:	f7ff ff99 	bl	8001878 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001946:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001948:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800194a:	0616      	lsls	r6, r2, #24
 800194c:	d527      	bpl.n	800199e <HAL_UART_IRQHandler+0x122>
 800194e:	060d      	lsls	r5, r1, #24
 8001950:	d525      	bpl.n	800199e <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001952:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001956:	2a21      	cmp	r2, #33	; 0x21
 8001958:	d12f      	bne.n	80019ba <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800195a:	68a2      	ldr	r2, [r4, #8]
 800195c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001960:	6a22      	ldr	r2, [r4, #32]
 8001962:	d117      	bne.n	8001994 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001964:	8811      	ldrh	r1, [r2, #0]
 8001966:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800196a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800196c:	6921      	ldr	r1, [r4, #16]
 800196e:	b979      	cbnz	r1, 8001990 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8001970:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001972:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001974:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001976:	3a01      	subs	r2, #1
 8001978:	b292      	uxth	r2, r2
 800197a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800197c:	b9ea      	cbnz	r2, 80019ba <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001984:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001990:	3201      	adds	r2, #1
 8001992:	e7ee      	b.n	8001972 <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001994:	1c51      	adds	r1, r2, #1
 8001996:	6221      	str	r1, [r4, #32]
 8001998:	7812      	ldrb	r2, [r2, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	e7ea      	b.n	8001974 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800199e:	0650      	lsls	r0, r2, #25
 80019a0:	d50b      	bpl.n	80019ba <HAL_UART_IRQHandler+0x13e>
 80019a2:	064a      	lsls	r2, r1, #25
 80019a4:	d509      	bpl.n	80019ba <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ac:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80019ae:	2320      	movs	r3, #32
 80019b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff ff20 	bl	80017fa <HAL_UART_TxCpltCallback>
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
 80019bc:	080019c1 	.word	0x080019c1

080019c0 <UART_DMAAbortOnError>:
{
 80019c0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80019c8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80019ca:	f7ff ff55 	bl	8001878 <HAL_UART_ErrorCallback>
 80019ce:	bd08      	pop	{r3, pc}

080019d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	2214      	movs	r2, #20
{
 80019d6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	eb0d 0002 	add.w	r0, sp, r2
 80019dc:	2100      	movs	r1, #0
 80019de:	f000 ff8d 	bl	80028fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	2400      	movs	r4, #0
 80019e4:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <MX_GPIO_Init+0x170>)
 80019e6:	9401      	str	r4, [sp, #4]
 80019e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, V2_Pin|V3_Pin, GPIO_PIN_RESET);
 80019ea:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8001b50 <MX_GPIO_Init+0x180>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, H1_Pin|H2_Pin|LD2_Pin|H3_Pin, GPIO_PIN_RESET);
 80019ee:	4e55      	ldr	r6, [pc, #340]	; (8001b44 <MX_GPIO_Init+0x174>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V1_Pin|C1_Pin, GPIO_PIN_RESET);
 80019f0:	4f55      	ldr	r7, [pc, #340]	; (8001b48 <MX_GPIO_Init+0x178>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	f042 0204 	orr.w	r2, r2, #4
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
 80019f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fa:	f002 0204 	and.w	r2, r2, #4
 80019fe:	9201      	str	r2, [sp, #4]
 8001a00:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a02:	9402      	str	r4, [sp, #8]
 8001a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a0e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001a12:	9202      	str	r2, [sp, #8]
 8001a14:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	9403      	str	r4, [sp, #12]
 8001a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a22:	f002 0201 	and.w	r2, r2, #1
 8001a26:	9203      	str	r2, [sp, #12]
 8001a28:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	9404      	str	r4, [sp, #16]
 8001a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a2e:	f042 0202 	orr.w	r2, r2, #2
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, V2_Pin|V3_Pin, GPIO_PIN_RESET);
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	4640      	mov	r0, r8
 8001a40:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, V2_Pin|V3_Pin, GPIO_PIN_RESET);
 8001a44:	f7fe ff68 	bl	8000918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, H1_Pin|H2_Pin|LD2_Pin|H3_Pin, GPIO_PIN_RESET);
 8001a48:	4622      	mov	r2, r4
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	f240 4132 	movw	r1, #1074	; 0x432
 8001a50:	f7fe ff62 	bl	8000918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, V1_Pin|C1_Pin, GPIO_PIN_RESET);
 8001a54:	4622      	mov	r2, r4
 8001a56:	4638      	mov	r0, r7
 8001a58:	f240 4101 	movw	r1, #1025	; 0x401
 8001a5c:	f7fe ff5c 	bl	8000918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a64:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a66:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a68:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <MX_GPIO_Init+0x17c>)
 8001a6a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	4640      	mov	r0, r8

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = V2_Pin|V3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = V2_Pin|V3_Pin;
 8001a70:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f7fe fe6f 	bl	8000758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7a:	a905      	add	r1, sp, #20
 8001a7c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = V2_Pin|V3_Pin;
 8001a7e:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8a:	f7fe fe65 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ESW_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	a905      	add	r1, sp, #20
 8001a90:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = ESW_Pin;
 8001a92:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a96:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ESW_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f7fe fe5e 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 8001a9c:	f240 4312 	movw	r3, #1042	; 0x412
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	a905      	add	r1, sp, #20
 8001aa2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 8001aa4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f7fe fe53 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ab2:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	a905      	add	r1, sp, #20
 8001ab6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ab8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f7fe fe4a 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALARM_Pin;
 8001ac4:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ALARM_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	a905      	add	r1, sp, #20
 8001ac8:	4630      	mov	r0, r6

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B4_Pin|B3_Pin|B6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aca:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = ALARM_Pin;
 8001ace:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ALARM_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f7fe fe40 	bl	8000758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B4_Pin|B3_Pin|B6_Pin;
 8001ad8:	f44f 7360 	mov.w	r3, #896	; 0x380
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	a905      	add	r1, sp, #20
 8001ade:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = B4_Pin|B3_Pin|B6_Pin;
 8001ae0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ae4:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f7fe fe36 	bl	8000758 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = V1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(V1_GPIO_Port, &GPIO_InitStruct);
 8001aec:	a905      	add	r1, sp, #20
 8001aee:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = V1_Pin;
 8001af0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(V1_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f7fe fe2d 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C1_Pin;
 8001afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b02:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 8001b04:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b06:	2311      	movs	r3, #17
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 8001b08:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b0a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f7fe fe22 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B5_Pin;
 8001b14:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(B5_GPIO_Port, &GPIO_InitStruct);
 8001b16:	a905      	add	r1, sp, #20
 8001b18:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = B5_Pin;
 8001b1a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b1e:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(B5_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f7fe fe19 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = B8_Pin|B7_Pin|B1B8_Pin|B2_Pin;
 8001b26:	f44f 734c 	mov.w	r3, #816	; 0x330
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	a905      	add	r1, sp, #20
 8001b2c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B8_Pin|B7_Pin|B1B8_Pin|B2_Pin;
 8001b2e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b30:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b32:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f7fe fe0f 	bl	8000758 <HAL_GPIO_Init>

}
 8001b3a:	b00a      	add	sp, #40	; 0x28
 8001b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	10210000 	.word	0x10210000
 8001b50:	40020800 	.word	0x40020800

08001b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b54:	b530      	push	{r4, r5, lr}
 8001b56:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b58:	2234      	movs	r2, #52	; 0x34
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	a807      	add	r0, sp, #28
 8001b5e:	f000 fecd 	bl	80028fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b62:	2100      	movs	r1, #0
 8001b64:	2214      	movs	r2, #20
 8001b66:	a802      	add	r0, sp, #8
 8001b68:	f000 fec8 	bl	80028fc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	2500      	movs	r5, #0
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <SystemClock_Config+0x8c>)
 8001b70:	9500      	str	r5, [sp, #0]
 8001b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b86:	9501      	str	r5, [sp, #4]
 8001b88:	6813      	ldr	r3, [r2, #0]
 8001b8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b96:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ba8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001baa:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bae:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bb0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb2:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bb8:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bba:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bbc:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bbe:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc0:	f7fe ffb4 	bl	8000b2c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bc8:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bce:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd2:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd6:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bd8:	f7fe fea4 	bl	8000924 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001bdc:	b015      	add	sp, #84	; 0x54
 8001bde:	bd30      	pop	{r4, r5, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40007000 	.word	0x40007000

08001be8 <main>:
{
 8001be8:	b508      	push	{r3, lr}
  HAL_Init();
 8001bea:	f7fe fd0d 	bl	8000608 <HAL_Init>
  SystemClock_Config();
 8001bee:	f7ff ffb1 	bl	8001b54 <SystemClock_Config>
  MX_GPIO_Init();
 8001bf2:	f7ff feed 	bl	80019d0 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001bf6:	f000 fc73 	bl	80024e0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001bfa:	f000 fdd1 	bl	80027a0 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001bfe:	f000 fc9d 	bl	800253c <MX_TIM10_Init>
  MX_TIM11_Init();
 8001c02:	f000 fcb5 	bl	8002570 <MX_TIM11_Init>
  MX_TIM2_Init();
 8001c06:	f000 fd89 	bl	800271c <MX_TIM2_Init>
  HAL_GPIO_WritePin(GPIOA, H1, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	4822      	ldr	r0, [pc, #136]	; (8001c98 <main+0xb0>)
 8001c10:	f7fe fe82 	bl	8000918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, H2, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2110      	movs	r1, #16
 8001c18:	481f      	ldr	r0, [pc, #124]	; (8001c98 <main+0xb0>)
 8001c1a:	f7fe fe7d 	bl	8000918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, H3, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c24:	481c      	ldr	r0, [pc, #112]	; (8001c98 <main+0xb0>)
 8001c26:	f7fe fe77 	bl	8000918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, V1, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	481b      	ldr	r0, [pc, #108]	; (8001c9c <main+0xb4>)
 8001c30:	f7fe fe72 	bl	8000918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, V2, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2101      	movs	r1, #1
 8001c38:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <main+0xb8>)
 8001c3a:	f7fe fe6d 	bl	8000918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, V3, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2102      	movs	r1, #2
 8001c42:	4817      	ldr	r0, [pc, #92]	; (8001ca0 <main+0xb8>)
 8001c44:	f7fe fe68 	bl	8000918 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, C1, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4e:	4813      	ldr	r0, [pc, #76]	; (8001c9c <main+0xb4>)
 8001c50:	f7fe fe62 	bl	8000918 <HAL_GPIO_WritePin>
  snprintf(MSG, sizeof(MSG), "sta     \n");
 8001c54:	4913      	ldr	r1, [pc, #76]	; (8001ca4 <main+0xbc>)
 8001c56:	4814      	ldr	r0, [pc, #80]	; (8001ca8 <main+0xc0>)
 8001c58:	f000 fe8c 	bl	8002974 <strcpy>
  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG),100);
 8001c5c:	220a      	movs	r2, #10
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	4911      	ldr	r1, [pc, #68]	; (8001ca8 <main+0xc0>)
 8001c62:	4812      	ldr	r0, [pc, #72]	; (8001cac <main+0xc4>)
 8001c64:	f7ff fd24 	bl	80016b0 <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim11);
 8001c68:	4811      	ldr	r0, [pc, #68]	; (8001cb0 <main+0xc8>)
 8001c6a:	f7ff f987 	bl	8000f7c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim10);
 8001c6e:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <main+0xcc>)
 8001c70:	f7ff f984 	bl	8000f7c <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c74:	2100      	movs	r1, #0
 8001c76:	4810      	ldr	r0, [pc, #64]	; (8001cb8 <main+0xd0>)
 8001c78:	f7ff fbe4 	bl	8001444 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001c7c:	210c      	movs	r1, #12
 8001c7e:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <main+0xd0>)
 8001c80:	f7ff fbe0 	bl	8001444 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001c84:	213c      	movs	r1, #60	; 0x3c
 8001c86:	480d      	ldr	r0, [pc, #52]	; (8001cbc <main+0xd4>)
 8001c88:	f7ff f988 	bl	8000f9c <HAL_TIM_Encoder_Start>
    HAL_UART_Receive_IT(&huart2, &rx, 1);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <main+0xd8>)
 8001c90:	4806      	ldr	r0, [pc, #24]	; (8001cac <main+0xc4>)
 8001c92:	f7ff fd8b 	bl	80017ac <HAL_UART_Receive_IT>
 8001c96:	e7fe      	b.n	8001c96 <main+0xae>
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	08003246 	.word	0x08003246
 8001ca8:	200000a5 	.word	0x200000a5
 8001cac:	200001d4 	.word	0x200001d4
 8001cb0:	20000154 	.word	0x20000154
 8001cb4:	20000114 	.word	0x20000114
 8001cb8:	20000194 	.word	0x20000194
 8001cbc:	200000d4 	.word	0x200000d4
 8001cc0:	200000d0 	.word	0x200000d0

08001cc4 <conv_temp>:

/* USER CODE BEGIN 4 */
void conv_temp(){
	tempmedida=0;
	tempmedida+=(tstring[1]-48);
	tempmedida+=(tstring[0]-48)*10;
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <conv_temp+0x18>)
 8001cc6:	7813      	ldrb	r3, [r2, #0]
	tempmedida+=(tstring[1]-48);
 8001cc8:	7852      	ldrb	r2, [r2, #1]
	tempmedida+=(tstring[0]-48)*10;
 8001cca:	3b30      	subs	r3, #48	; 0x30
	tempmedida+=(tstring[1]-48);
 8001ccc:	3a30      	subs	r2, #48	; 0x30
	tempmedida+=(tstring[0]-48)*10;
 8001cce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cd2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001cd6:	4a02      	ldr	r2, [pc, #8]	; (8001ce0 <conv_temp+0x1c>)
 8001cd8:	7013      	strb	r3, [r2, #0]
 8001cda:	4770      	bx	lr
 8001cdc:	2000001d 	.word	0x2000001d
 8001ce0:	200000d1 	.word	0x200000d1

08001ce4 <HAL_UART_RxCpltCallback>:
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rcv[j]=rx;
 8001ce6:	4d45      	ldr	r5, [pc, #276]	; (8001dfc <HAL_UART_RxCpltCallback+0x118>)
 8001ce8:	4a45      	ldr	r2, [pc, #276]	; (8001e00 <HAL_UART_RxCpltCallback+0x11c>)
 8001cea:	782b      	ldrb	r3, [r5, #0]
 8001cec:	4c45      	ldr	r4, [pc, #276]	; (8001e04 <HAL_UART_RxCpltCallback+0x120>)
 8001cee:	7812      	ldrb	r2, [r2, #0]
 8001cf0:	54e2      	strb	r2, [r4, r3]
	j++;
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
	if(j==10)j=0;
 8001cf6:	2b0a      	cmp	r3, #10
 8001cf8:	bf08      	it	eq
 8001cfa:	2300      	moveq	r3, #0
	if(rx==13){
 8001cfc:	2a0d      	cmp	r2, #13
	if(j==10)j=0;
 8001cfe:	702b      	strb	r3, [r5, #0]
	if(rx==13){
 8001d00:	d106      	bne.n	8001d10 <HAL_UART_RxCpltCallback+0x2c>
		snprintf(rcv, sizeof(rcv), "          ");
 8001d02:	4a41      	ldr	r2, [pc, #260]	; (8001e08 <HAL_UART_RxCpltCallback+0x124>)
 8001d04:	483f      	ldr	r0, [pc, #252]	; (8001e04 <HAL_UART_RxCpltCallback+0x120>)
 8001d06:	210a      	movs	r1, #10
 8001d08:	f000 fe00 	bl	800290c <sniprintf>
		j=0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	702b      	strb	r3, [r5, #0]
	}

	if(rcv[0]=='l'){
 8001d10:	7823      	ldrb	r3, [r4, #0]
 8001d12:	2b6c      	cmp	r3, #108	; 0x6c
 8001d14:	d117      	bne.n	8001d46 <HAL_UART_RxCpltCallback+0x62>
		if(rcv[6]=='0'||rcv[6]=='3'){
 8001d16:	79a3      	ldrb	r3, [r4, #6]
 8001d18:	2b30      	cmp	r3, #48	; 0x30
 8001d1a:	d001      	beq.n	8001d20 <HAL_UART_RxCpltCallback+0x3c>
 8001d1c:	2b33      	cmp	r3, #51	; 0x33
 8001d1e:	d112      	bne.n	8001d46 <HAL_UART_RxCpltCallback+0x62>
			for(g=0;g<7;g++){
 8001d20:	4a3a      	ldr	r2, [pc, #232]	; (8001e0c <HAL_UART_RxCpltCallback+0x128>)
				if(rcv[g+1]=='0')lamps[g]=0;
				if(rcv[g+1]=='3')lamps[g]=1;
 8001d22:	4e3b      	ldr	r6, [pc, #236]	; (8001e10 <HAL_UART_RxCpltCallback+0x12c>)
			for(g=0;g<7;g++){
 8001d24:	2300      	movs	r3, #0
 8001d26:	7013      	strb	r3, [r2, #0]
 8001d28:	4618      	mov	r0, r3
				if(rcv[g+1]=='3')lamps[g]=1;
 8001d2a:	2701      	movs	r7, #1
				if(rcv[g+1]=='0')lamps[g]=0;
 8001d2c:	469e      	mov	lr, r3
			for(g=0;g<7;g++){
 8001d2e:	b2d9      	uxtb	r1, r3
 8001d30:	2907      	cmp	r1, #7
 8001d32:	d150      	bne.n	8001dd6 <HAL_UART_RxCpltCallback+0xf2>
 8001d34:	b100      	cbz	r0, 8001d38 <HAL_UART_RxCpltCallback+0x54>
 8001d36:	7011      	strb	r1, [r2, #0]
			}
			snprintf(rcv, sizeof(rcv), "          ");
 8001d38:	4a33      	ldr	r2, [pc, #204]	; (8001e08 <HAL_UART_RxCpltCallback+0x124>)
 8001d3a:	4832      	ldr	r0, [pc, #200]	; (8001e04 <HAL_UART_RxCpltCallback+0x120>)
 8001d3c:	210a      	movs	r1, #10
 8001d3e:	f000 fde5 	bl	800290c <sniprintf>
			j=0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	702b      	strb	r3, [r5, #0]
		}
	}
	if(rcv[0]=='j'){
 8001d46:	7823      	ldrb	r3, [r4, #0]
 8001d48:	2b6a      	cmp	r3, #106	; 0x6a
 8001d4a:	d115      	bne.n	8001d78 <HAL_UART_RxCpltCallback+0x94>
		if(rcv[2]== '0'||rcv[2]=='1'){
 8001d4c:	78a2      	ldrb	r2, [r4, #2]
 8001d4e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d810      	bhi.n	8001d78 <HAL_UART_RxCpltCallback+0x94>
			if(rcv[1]=='0')janelas[0]=0;
 8001d56:	7861      	ldrb	r1, [r4, #1]
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_UART_RxCpltCallback+0x130>)
 8001d5a:	2930      	cmp	r1, #48	; 0x30
 8001d5c:	d148      	bne.n	8001df0 <HAL_UART_RxCpltCallback+0x10c>
 8001d5e:	2100      	movs	r1, #0
			if(rcv[1]=='1')janelas[0]=1;
 8001d60:	7019      	strb	r1, [r3, #0]
			if(rcv[2]=='0')janelas[1]=0;
 8001d62:	2a30      	cmp	r2, #48	; 0x30
 8001d64:	d148      	bne.n	8001df8 <HAL_UART_RxCpltCallback+0x114>
 8001d66:	2200      	movs	r2, #0
 8001d68:	705a      	strb	r2, [r3, #1]
			if(rcv[2]=='1')janelas[1]=1;
			snprintf(rcv, sizeof(rcv), "          ");
 8001d6a:	210a      	movs	r1, #10
 8001d6c:	4a26      	ldr	r2, [pc, #152]	; (8001e08 <HAL_UART_RxCpltCallback+0x124>)
 8001d6e:	4825      	ldr	r0, [pc, #148]	; (8001e04 <HAL_UART_RxCpltCallback+0x120>)
 8001d70:	f000 fdcc 	bl	800290c <sniprintf>
			j=0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	702b      	strb	r3, [r5, #0]
		}
	}
	if(rcv[0]=='t'){
 8001d78:	7823      	ldrb	r3, [r4, #0]
 8001d7a:	2b74      	cmp	r3, #116	; 0x74
 8001d7c:	d11b      	bne.n	8001db6 <HAL_UART_RxCpltCallback+0xd2>
		if(rcv[1]>=48&&rcv[2]>=48){
 8001d7e:	7861      	ldrb	r1, [r4, #1]
 8001d80:	292f      	cmp	r1, #47	; 0x2f
 8001d82:	d918      	bls.n	8001db6 <HAL_UART_RxCpltCallback+0xd2>
 8001d84:	78a2      	ldrb	r2, [r4, #2]
 8001d86:	2a2f      	cmp	r2, #47	; 0x2f
 8001d88:	d915      	bls.n	8001db6 <HAL_UART_RxCpltCallback+0xd2>
			tstring[0]=rcv[1];
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <HAL_UART_RxCpltCallback+0x134>)
 8001d8c:	7019      	strb	r1, [r3, #0]
			tstring[1]=rcv[2];
 8001d8e:	705a      	strb	r2, [r3, #1]
			conv_temp();
 8001d90:	f7ff ff98 	bl	8001cc4 <conv_temp>
			if(tempmedida>=temperatura){
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_UART_RxCpltCallback+0x138>)

			}
			else if(tempmedida<temperatura){
				cool=0;
			}
			snprintf(rcv, sizeof(rcv), "          ");
 8001d96:	481b      	ldr	r0, [pc, #108]	; (8001e04 <HAL_UART_RxCpltCallback+0x120>)
			if(tempmedida>=temperatura){
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_UART_RxCpltCallback+0x13c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_UART_RxCpltCallback+0x140>)
				cool=1;
 8001da2:	bf2c      	ite	cs
 8001da4:	2201      	movcs	r2, #1
				cool=0;
 8001da6:	2200      	movcc	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
			snprintf(rcv, sizeof(rcv), "          ");
 8001daa:	210a      	movs	r1, #10
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_UART_RxCpltCallback+0x124>)
 8001dae:	f000 fdad 	bl	800290c <sniprintf>
			j=0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	702b      	strb	r3, [r5, #0]
		}
	}
	if(rcv[0]=='i'&&rcv[1]=='0'){
 8001db6:	7823      	ldrb	r3, [r4, #0]
 8001db8:	2b69      	cmp	r3, #105	; 0x69
 8001dba:	d105      	bne.n	8001dc8 <HAL_UART_RxCpltCallback+0xe4>
 8001dbc:	7863      	ldrb	r3, [r4, #1]
 8001dbe:	2b30      	cmp	r3, #48	; 0x30
		intruder=0;
 8001dc0:	bf02      	ittt	eq
 8001dc2:	4b19      	ldreq	r3, [pc, #100]	; (8001e28 <HAL_UART_RxCpltCallback+0x144>)
 8001dc4:	2200      	moveq	r2, #0
 8001dc6:	701a      	strbeq	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &rx, 1);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	490d      	ldr	r1, [pc, #52]	; (8001e00 <HAL_UART_RxCpltCallback+0x11c>)
 8001dcc:	4817      	ldr	r0, [pc, #92]	; (8001e2c <HAL_UART_RxCpltCallback+0x148>)
}
 8001dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_UART_Receive_IT(&huart2, &rx, 1);
 8001dd2:	f7ff bceb 	b.w	80017ac <HAL_UART_Receive_IT>
				if(rcv[g+1]=='0')lamps[g]=0;
 8001dd6:	18e1      	adds	r1, r4, r3
 8001dd8:	7849      	ldrb	r1, [r1, #1]
 8001dda:	2930      	cmp	r1, #48	; 0x30
 8001ddc:	d104      	bne.n	8001de8 <HAL_UART_RxCpltCallback+0x104>
 8001dde:	f803 e006 	strb.w	lr, [r3, r6]
 8001de2:	3301      	adds	r3, #1
 8001de4:	2001      	movs	r0, #1
 8001de6:	e7a2      	b.n	8001d2e <HAL_UART_RxCpltCallback+0x4a>
				if(rcv[g+1]=='3')lamps[g]=1;
 8001de8:	2933      	cmp	r1, #51	; 0x33
 8001dea:	bf08      	it	eq
 8001dec:	559f      	strbeq	r7, [r3, r6]
 8001dee:	e7f8      	b.n	8001de2 <HAL_UART_RxCpltCallback+0xfe>
			if(rcv[1]=='1')janelas[0]=1;
 8001df0:	2931      	cmp	r1, #49	; 0x31
 8001df2:	d1b6      	bne.n	8001d62 <HAL_UART_RxCpltCallback+0x7e>
 8001df4:	2101      	movs	r1, #1
 8001df6:	e7b3      	b.n	8001d60 <HAL_UART_RxCpltCallback+0x7c>
			if(rcv[2]=='1')janelas[1]=1;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	e7b5      	b.n	8001d68 <HAL_UART_RxCpltCallback+0x84>
 8001dfc:	200000b2 	.word	0x200000b2
 8001e00:	200000d0 	.word	0x200000d0
 8001e04:	20000012 	.word	0x20000012
 8001e08:	0800323b 	.word	0x0800323b
 8001e0c:	200000b0 	.word	0x200000b0
 8001e10:	200000b5 	.word	0x200000b5
 8001e14:	200000b3 	.word	0x200000b3
 8001e18:	2000001d 	.word	0x2000001d
 8001e1c:	200000d1 	.word	0x200000d1
 8001e20:	2000001c 	.word	0x2000001c
 8001e24:	200000af 	.word	0x200000af
 8001e28:	200000b1 	.word	0x200000b1
 8001e2c:	200001d4 	.word	0x200001d4

08001e30 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim==&htim11 && intruder==0){
 8001e30:	4b9c      	ldr	r3, [pc, #624]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001e32:	4298      	cmp	r0, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e38:	4605      	mov	r5, r0
	if(htim==&htim11 && intruder==0){
 8001e3a:	f040 816f 	bne.w	800211c <HAL_TIM_PeriodElapsedCallback+0x2ec>
 8001e3e:	4c9a      	ldr	r4, [pc, #616]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001e40:	7823      	ldrb	r3, [r4, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 816a 	bne.w	800211c <HAL_TIM_PeriodElapsedCallback+0x2ec>
		if(HAL_GPIO_ReadPin (GPIOB, B1)&&ap[0]==0){
 8001e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e4c:	4897      	ldr	r0, [pc, #604]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e4e:	f7fe fd5d 	bl	800090c <HAL_GPIO_ReadPin>
 8001e52:	b1b8      	cbz	r0, 8001e84 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001e54:	4b96      	ldr	r3, [pc, #600]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	b9a2      	cbnz	r2, 8001e84 <HAL_TIM_PeriodElapsedCallback+0x54>
			lamps[0]=!lamps[0], ap[0]=1;
 8001e5a:	4a96      	ldr	r2, [pc, #600]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001e5c:	7811      	ldrb	r1, [r2, #0]
 8001e5e:	2900      	cmp	r1, #0
 8001e60:	bf0c      	ite	eq
 8001e62:	2101      	moveq	r1, #1
 8001e64:	2100      	movne	r1, #0
 8001e66:	7011      	strb	r1, [r2, #0]
 8001e68:	f04f 0201 	mov.w	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
			if(lamps[0]==1)snprintf(MSG, sizeof(MSG), "l11     \n");
 8001e6e:	f040 828c 	bne.w	800238a <HAL_TIM_PeriodElapsedCallback+0x55a>
 8001e72:	4991      	ldr	r1, [pc, #580]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001e74:	4891      	ldr	r0, [pc, #580]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e76:	f000 fd7d 	bl	8002974 <strcpy>
			if(lamps[0]==0)snprintf(MSG, sizeof(MSG), "l10     \n");
			HAL_UART_Transmit_IT(&huart2, MSG, sizeof(MSG));
 8001e7a:	220a      	movs	r2, #10
 8001e7c:	498f      	ldr	r1, [pc, #572]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e7e:	4890      	ldr	r0, [pc, #576]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001e80:	f7ff fc75 	bl	800176e <HAL_UART_Transmit_IT>
		}
		if(!HAL_GPIO_ReadPin (GPIOB, B1))ap[0]=0;
 8001e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e88:	4888      	ldr	r0, [pc, #544]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e8a:	f7fe fd3f 	bl	800090c <HAL_GPIO_ReadPin>
 8001e8e:	b908      	cbnz	r0, 8001e94 <HAL_TIM_PeriodElapsedCallback+0x64>
 8001e90:	4b87      	ldr	r3, [pc, #540]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001e92:	7018      	strb	r0, [r3, #0]

		if(HAL_GPIO_ReadPin (GPIOB, B2)&&ap[1]==0){
 8001e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e98:	4884      	ldr	r0, [pc, #528]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e9a:	f7fe fd37 	bl	800090c <HAL_GPIO_ReadPin>
 8001e9e:	b1b8      	cbz	r0, 8001ed0 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8001ea0:	4b83      	ldr	r3, [pc, #524]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ea2:	785a      	ldrb	r2, [r3, #1]
 8001ea4:	b9a2      	cbnz	r2, 8001ed0 <HAL_TIM_PeriodElapsedCallback+0xa0>
			lamps[1]=!lamps[1], ap[1]=1;
 8001ea6:	4a83      	ldr	r2, [pc, #524]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ea8:	7851      	ldrb	r1, [r2, #1]
 8001eaa:	2900      	cmp	r1, #0
 8001eac:	bf0c      	ite	eq
 8001eae:	2101      	moveq	r1, #1
 8001eb0:	2100      	movne	r1, #0
 8001eb2:	7051      	strb	r1, [r2, #1]
 8001eb4:	f04f 0201 	mov.w	r2, #1
 8001eb8:	705a      	strb	r2, [r3, #1]
			if(lamps[1]==1)snprintf(MSG, sizeof(MSG), "l21     \n");
 8001eba:	f040 828f 	bne.w	80023dc <HAL_TIM_PeriodElapsedCallback+0x5ac>
 8001ebe:	4981      	ldr	r1, [pc, #516]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ec0:	487e      	ldr	r0, [pc, #504]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001ec2:	f000 fd57 	bl	8002974 <strcpy>
			if(lamps[1]==0)snprintf(MSG, sizeof(MSG), "l20     \n");
			HAL_UART_Transmit_IT(&huart2, MSG, sizeof(MSG));
 8001ec6:	220a      	movs	r2, #10
 8001ec8:	497c      	ldr	r1, [pc, #496]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001eca:	487d      	ldr	r0, [pc, #500]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001ecc:	f7ff fc4f 	bl	800176e <HAL_UART_Transmit_IT>
		}
		if(!HAL_GPIO_ReadPin (GPIOB, B2))ap[1]=0;
 8001ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed4:	4875      	ldr	r0, [pc, #468]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ed6:	f7fe fd19 	bl	800090c <HAL_GPIO_ReadPin>
 8001eda:	b908      	cbnz	r0, 8001ee0 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8001edc:	4b74      	ldr	r3, [pc, #464]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ede:	7058      	strb	r0, [r3, #1]

		if(HAL_GPIO_ReadPin (GPIOA, B3)&&ap[2]==0){
 8001ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee4:	4878      	ldr	r0, [pc, #480]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001ee6:	f7fe fd11 	bl	800090c <HAL_GPIO_ReadPin>
 8001eea:	b1b8      	cbz	r0, 8001f1c <HAL_TIM_PeriodElapsedCallback+0xec>
 8001eec:	4b70      	ldr	r3, [pc, #448]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001eee:	789a      	ldrb	r2, [r3, #2]
 8001ef0:	b9a2      	cbnz	r2, 8001f1c <HAL_TIM_PeriodElapsedCallback+0xec>
			lamps[2]=!lamps[2], ap[2]=1;
 8001ef2:	4a70      	ldr	r2, [pc, #448]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ef4:	7891      	ldrb	r1, [r2, #2]
 8001ef6:	2900      	cmp	r1, #0
 8001ef8:	bf0c      	ite	eq
 8001efa:	2101      	moveq	r1, #1
 8001efc:	2100      	movne	r1, #0
 8001efe:	7091      	strb	r1, [r2, #2]
 8001f00:	f04f 0201 	mov.w	r2, #1
 8001f04:	709a      	strb	r2, [r3, #2]
			if(lamps[2]==1)snprintf(MSG, sizeof(MSG), "l31     \n");
 8001f06:	f040 826b 	bne.w	80023e0 <HAL_TIM_PeriodElapsedCallback+0x5b0>
 8001f0a:	4970      	ldr	r1, [pc, #448]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001f0c:	486b      	ldr	r0, [pc, #428]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f0e:	f000 fd31 	bl	8002974 <strcpy>
			if(lamps[2]==0)snprintf(MSG, sizeof(MSG), "l30     \n");
			HAL_UART_Transmit_IT(&huart2, MSG, sizeof(MSG));
 8001f12:	220a      	movs	r2, #10
 8001f14:	4969      	ldr	r1, [pc, #420]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f16:	486a      	ldr	r0, [pc, #424]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f18:	f7ff fc29 	bl	800176e <HAL_UART_Transmit_IT>
		}
		if(!HAL_GPIO_ReadPin (GPIOA, B3))ap[2]=0;
 8001f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f20:	4869      	ldr	r0, [pc, #420]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f22:	f7fe fcf3 	bl	800090c <HAL_GPIO_ReadPin>
 8001f26:	b908      	cbnz	r0, 8001f2c <HAL_TIM_PeriodElapsedCallback+0xfc>
 8001f28:	4b61      	ldr	r3, [pc, #388]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001f2a:	7098      	strb	r0, [r3, #2]

		if(HAL_GPIO_ReadPin (GPIOA, B4)&&ap[3]==0){
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	4866      	ldr	r0, [pc, #408]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f30:	f7fe fcec 	bl	800090c <HAL_GPIO_ReadPin>
 8001f34:	b1b8      	cbz	r0, 8001f66 <HAL_TIM_PeriodElapsedCallback+0x136>
 8001f36:	4b5e      	ldr	r3, [pc, #376]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001f38:	78da      	ldrb	r2, [r3, #3]
 8001f3a:	b9a2      	cbnz	r2, 8001f66 <HAL_TIM_PeriodElapsedCallback+0x136>
			lamps[3]=!lamps[3], ap[3]=1;
 8001f3c:	4a5d      	ldr	r2, [pc, #372]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f3e:	78d1      	ldrb	r1, [r2, #3]
 8001f40:	2900      	cmp	r1, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2101      	moveq	r1, #1
 8001f46:	2100      	movne	r1, #0
 8001f48:	70d1      	strb	r1, [r2, #3]
 8001f4a:	f04f 0201 	mov.w	r2, #1
 8001f4e:	70da      	strb	r2, [r3, #3]
			if(lamps[3]==1)snprintf(MSG, sizeof(MSG), "l41     \n");
 8001f50:	f040 8248 	bne.w	80023e4 <HAL_TIM_PeriodElapsedCallback+0x5b4>
 8001f54:	495e      	ldr	r1, [pc, #376]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001f56:	4859      	ldr	r0, [pc, #356]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f58:	f000 fd0c 	bl	8002974 <strcpy>
			if(lamps[3]==0)snprintf(MSG, sizeof(MSG), "l40     \n");
			HAL_UART_Transmit_IT(&huart2, MSG, sizeof(MSG));
 8001f5c:	220a      	movs	r2, #10
 8001f5e:	4957      	ldr	r1, [pc, #348]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f60:	4857      	ldr	r0, [pc, #348]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f62:	f7ff fc04 	bl	800176e <HAL_UART_Transmit_IT>
		}
		if(!HAL_GPIO_ReadPin (GPIOA, B4))ap[3]=0;
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	4857      	ldr	r0, [pc, #348]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f6a:	f7fe fccf 	bl	800090c <HAL_GPIO_ReadPin>
 8001f6e:	b908      	cbnz	r0, 8001f74 <HAL_TIM_PeriodElapsedCallback+0x144>
 8001f70:	4b4f      	ldr	r3, [pc, #316]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001f72:	70d8      	strb	r0, [r3, #3]

		if(HAL_GPIO_ReadPin (GPIOC, B5)&&ap[4]==0){
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	4857      	ldr	r0, [pc, #348]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001f78:	f7fe fcc8 	bl	800090c <HAL_GPIO_ReadPin>
 8001f7c:	b1b8      	cbz	r0, 8001fae <HAL_TIM_PeriodElapsedCallback+0x17e>
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001f80:	791a      	ldrb	r2, [r3, #4]
 8001f82:	b9a2      	cbnz	r2, 8001fae <HAL_TIM_PeriodElapsedCallback+0x17e>
			lamps[4]=!lamps[4], ap[4]=1;
 8001f84:	4a4b      	ldr	r2, [pc, #300]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f86:	7911      	ldrb	r1, [r2, #4]
 8001f88:	2900      	cmp	r1, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2101      	moveq	r1, #1
 8001f8e:	2100      	movne	r1, #0
 8001f90:	7111      	strb	r1, [r2, #4]
 8001f92:	f04f 0201 	mov.w	r2, #1
 8001f96:	711a      	strb	r2, [r3, #4]
			if(lamps[4]==1)snprintf(MSG, sizeof(MSG), "l51     \n");
 8001f98:	f040 8226 	bne.w	80023e8 <HAL_TIM_PeriodElapsedCallback+0x5b8>
 8001f9c:	494e      	ldr	r1, [pc, #312]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001f9e:	4847      	ldr	r0, [pc, #284]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001fa0:	f000 fce8 	bl	8002974 <strcpy>
			if(lamps[4]==0)snprintf(MSG, sizeof(MSG), "l50     \n");
			HAL_UART_Transmit_IT(&huart2, MSG, sizeof(MSG));
 8001fa4:	220a      	movs	r2, #10
 8001fa6:	4945      	ldr	r1, [pc, #276]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001fa8:	4845      	ldr	r0, [pc, #276]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001faa:	f7ff fbe0 	bl	800176e <HAL_UART_Transmit_IT>
		}
		if(!HAL_GPIO_ReadPin (GPIOC, B5)) ap[4]=0;
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	4848      	ldr	r0, [pc, #288]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001fb2:	f7fe fcab 	bl	800090c <HAL_GPIO_ReadPin>
 8001fb6:	b908      	cbnz	r0, 8001fbc <HAL_TIM_PeriodElapsedCallback+0x18c>
 8001fb8:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001fba:	7118      	strb	r0, [r3, #4]

		if(HAL_GPIO_ReadPin (GPIOA, B6)&&ap[5]==0){
 8001fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc0:	4841      	ldr	r0, [pc, #260]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001fc2:	f7fe fca3 	bl	800090c <HAL_GPIO_ReadPin>
 8001fc6:	b1b8      	cbz	r0, 8001ff8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8001fc8:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001fca:	795a      	ldrb	r2, [r3, #5]
 8001fcc:	b9a2      	cbnz	r2, 8001ff8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			lamps[5]=!lamps[5], ap[5]=1;
 8001fce:	4a39      	ldr	r2, [pc, #228]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001fd0:	7951      	ldrb	r1, [r2, #5]
 8001fd2:	2900      	cmp	r1, #0
 8001fd4:	bf0c      	ite	eq
 8001fd6:	2101      	moveq	r1, #1
 8001fd8:	2100      	movne	r1, #0
 8001fda:	7151      	strb	r1, [r2, #5]
 8001fdc:	f04f 0201 	mov.w	r2, #1
 8001fe0:	715a      	strb	r2, [r3, #5]
			if(lamps[5]==1)snprintf(MSG, sizeof(MSG), "l61     \n");
 8001fe2:	f040 8203 	bne.w	80023ec <HAL_TIM_PeriodElapsedCallback+0x5bc>
 8001fe6:	493d      	ldr	r1, [pc, #244]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001fe8:	4834      	ldr	r0, [pc, #208]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001fea:	f000 fcc3 	bl	8002974 <strcpy>
			if(lamps[5]==0)snprintf(MSG, sizeof(MSG), "l60     \n");
			HAL_UART_Transmit_IT(&huart2, MSG, sizeof(MSG));
 8001fee:	220a      	movs	r2, #10
 8001ff0:	4932      	ldr	r1, [pc, #200]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001ff2:	4833      	ldr	r0, [pc, #204]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001ff4:	f7ff fbbb 	bl	800176e <HAL_UART_Transmit_IT>
		}
		if(!HAL_GPIO_ReadPin (GPIOA, B6))ap[5]=0;
 8001ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ffc:	4832      	ldr	r0, [pc, #200]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001ffe:	f7fe fc85 	bl	800090c <HAL_GPIO_ReadPin>
 8002002:	b908      	cbnz	r0, 8002008 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002006:	7158      	strb	r0, [r3, #5]

		if(HAL_GPIO_ReadPin (GPIOB, B7)&&ap[6]==0){
 8002008:	2120      	movs	r1, #32
 800200a:	4828      	ldr	r0, [pc, #160]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800200c:	f7fe fc7e 	bl	800090c <HAL_GPIO_ReadPin>
 8002010:	b1b8      	cbz	r0, 8002042 <HAL_TIM_PeriodElapsedCallback+0x212>
 8002012:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002014:	799a      	ldrb	r2, [r3, #6]
 8002016:	b9a2      	cbnz	r2, 8002042 <HAL_TIM_PeriodElapsedCallback+0x212>
			janelas[0]=!janelas[0], ap[6]=1;
 8002018:	4a31      	ldr	r2, [pc, #196]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800201a:	7811      	ldrb	r1, [r2, #0]
 800201c:	2900      	cmp	r1, #0
 800201e:	bf0c      	ite	eq
 8002020:	2101      	moveq	r1, #1
 8002022:	2100      	movne	r1, #0
 8002024:	7011      	strb	r1, [r2, #0]
 8002026:	f04f 0201 	mov.w	r2, #1
 800202a:	719a      	strb	r2, [r3, #6]
			if(janelas[0]==1)snprintf(MSG, sizeof(MSG), "j11     \n");
 800202c:	f040 81e0 	bne.w	80023f0 <HAL_TIM_PeriodElapsedCallback+0x5c0>
 8002030:	492c      	ldr	r1, [pc, #176]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002032:	4822      	ldr	r0, [pc, #136]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002034:	f000 fc9e 	bl	8002974 <strcpy>
			if(janelas[0]==0)snprintf(MSG, sizeof(MSG), "j10     \n");
			HAL_UART_Transmit_IT(&huart2, MSG, sizeof(MSG));
 8002038:	220a      	movs	r2, #10
 800203a:	4920      	ldr	r1, [pc, #128]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800203c:	4820      	ldr	r0, [pc, #128]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800203e:	f7ff fb96 	bl	800176e <HAL_UART_Transmit_IT>
		}
		if(!HAL_GPIO_ReadPin (GPIOB, B7))ap[6]=0;
 8002042:	2120      	movs	r1, #32
 8002044:	4819      	ldr	r0, [pc, #100]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002046:	f7fe fc61 	bl	800090c <HAL_GPIO_ReadPin>
 800204a:	b908      	cbnz	r0, 8002050 <HAL_TIM_PeriodElapsedCallback+0x220>
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800204e:	7198      	strb	r0, [r3, #6]

		if(HAL_GPIO_ReadPin (GPIOB, B8)&&ap[7]==0){
 8002050:	2110      	movs	r1, #16
 8002052:	4816      	ldr	r0, [pc, #88]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002054:	f7fe fc5a 	bl	800090c <HAL_GPIO_ReadPin>
 8002058:	b1b8      	cbz	r0, 800208a <HAL_TIM_PeriodElapsedCallback+0x25a>
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800205c:	79da      	ldrb	r2, [r3, #7]
 800205e:	b9a2      	cbnz	r2, 800208a <HAL_TIM_PeriodElapsedCallback+0x25a>
			janelas[1]=!janelas[1], ap[7]=1;
 8002060:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002062:	7851      	ldrb	r1, [r2, #1]
 8002064:	2900      	cmp	r1, #0
 8002066:	bf0c      	ite	eq
 8002068:	2101      	moveq	r1, #1
 800206a:	2100      	movne	r1, #0
 800206c:	7051      	strb	r1, [r2, #1]
 800206e:	f04f 0201 	mov.w	r2, #1
 8002072:	71da      	strb	r2, [r3, #7]
			if(janelas[1]==1)snprintf(MSG, sizeof(MSG), "j21     \n");
 8002074:	f040 81be 	bne.w	80023f4 <HAL_TIM_PeriodElapsedCallback+0x5c4>
 8002078:	491b      	ldr	r1, [pc, #108]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800207a:	4810      	ldr	r0, [pc, #64]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800207c:	f000 fc7a 	bl	8002974 <strcpy>
			if(janelas[1]==0)snprintf(MSG, sizeof(MSG), "j20     \n");
			HAL_UART_Transmit_IT(&huart2, MSG, sizeof(MSG));
 8002080:	220a      	movs	r2, #10
 8002082:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002084:	480e      	ldr	r0, [pc, #56]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002086:	f7ff fb72 	bl	800176e <HAL_UART_Transmit_IT>
		}
		if(!HAL_GPIO_ReadPin (GPIOB, B8))ap[7]=0;
 800208a:	2110      	movs	r1, #16
 800208c:	4807      	ldr	r0, [pc, #28]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800208e:	f7fe fc3d 	bl	800090c <HAL_GPIO_ReadPin>
 8002092:	b908      	cbnz	r0, 8002098 <HAL_TIM_PeriodElapsedCallback+0x268>
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002096:	71d8      	strb	r0, [r3, #7]

		if(!HAL_GPIO_ReadPin (GPIOA, ALARM)&&ap[9]==0){
 8002098:	2140      	movs	r1, #64	; 0x40
 800209a:	480b      	ldr	r0, [pc, #44]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800209c:	f7fe fc36 	bl	800090c <HAL_GPIO_ReadPin>
 80020a0:	bba0      	cbnz	r0, 800210c <HAL_TIM_PeriodElapsedCallback+0x2dc>
 80020a2:	e023      	b.n	80020ec <HAL_TIM_PeriodElapsedCallback+0x2bc>
 80020a4:	20000154 	.word	0x20000154
 80020a8:	200000b1 	.word	0x200000b1
 80020ac:	40020400 	.word	0x40020400
 80020b0:	20000008 	.word	0x20000008
 80020b4:	200000b5 	.word	0x200000b5
 80020b8:	08003190 	.word	0x08003190
 80020bc:	200000a5 	.word	0x200000a5
 80020c0:	200001d4 	.word	0x200001d4
 80020c4:	0800319a 	.word	0x0800319a
 80020c8:	40020000 	.word	0x40020000
 80020cc:	080031a4 	.word	0x080031a4
 80020d0:	080031ae 	.word	0x080031ae
 80020d4:	40020800 	.word	0x40020800
 80020d8:	080031b8 	.word	0x080031b8
 80020dc:	080031c2 	.word	0x080031c2
 80020e0:	200000b3 	.word	0x200000b3
 80020e4:	080031cc 	.word	0x080031cc
 80020e8:	080031d6 	.word	0x080031d6
 80020ec:	4aa8      	ldr	r2, [pc, #672]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80020ee:	7a53      	ldrb	r3, [r2, #9]
 80020f0:	b963      	cbnz	r3, 800210c <HAL_TIM_PeriodElapsedCallback+0x2dc>
			ap[9]=1;
 80020f2:	2301      	movs	r3, #1
 80020f4:	7253      	strb	r3, [r2, #9]
			intruder=1;
			snprintf(MSG, sizeof(MSG), "i1      \n\r");
 80020f6:	210a      	movs	r1, #10
 80020f8:	4aa6      	ldr	r2, [pc, #664]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80020fa:	48a7      	ldr	r0, [pc, #668]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x568>)
			intruder=1;
 80020fc:	7023      	strb	r3, [r4, #0]
			snprintf(MSG, sizeof(MSG), "i1      \n\r");
 80020fe:	f000 fc05 	bl	800290c <sniprintf>
			HAL_UART_Transmit_IT(&huart2, MSG, sizeof(MSG));
 8002102:	220a      	movs	r2, #10
 8002104:	49a4      	ldr	r1, [pc, #656]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002106:	48a5      	ldr	r0, [pc, #660]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002108:	f7ff fb31 	bl	800176e <HAL_UART_Transmit_IT>
		}
		if(HAL_GPIO_ReadPin (GPIOA, ALARM))ap[9]=0;
 800210c:	2140      	movs	r1, #64	; 0x40
 800210e:	48a4      	ldr	r0, [pc, #656]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002110:	f7fe fbfc 	bl	800090c <HAL_GPIO_ReadPin>
 8002114:	b110      	cbz	r0, 800211c <HAL_TIM_PeriodElapsedCallback+0x2ec>
 8002116:	4b9e      	ldr	r3, [pc, #632]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002118:	2200      	movs	r2, #0
 800211a:	725a      	strb	r2, [r3, #9]
	}


	if(htim==&htim10){
 800211c:	4ba1      	ldr	r3, [pc, #644]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800211e:	4ea2      	ldr	r6, [pc, #648]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002120:	429d      	cmp	r5, r3
 8002122:	4da2      	ldr	r5, [pc, #648]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002124:	f040 8122 	bne.w	800236c <HAL_TIM_PeriodElapsedCallback+0x53c>
		Enc=(TIM4->CNT)>>2;
 8002128:	4ba1      	ldr	r3, [pc, #644]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800212a:	4aa2      	ldr	r2, [pc, #648]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x584>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	4fa2      	ldr	r7, [pc, #648]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002130:	f3c3 0387 	ubfx	r3, r3, #2, #8
 8002134:	7033      	strb	r3, [r6, #0]
		if(Enc==0&&lastEnc==124) {
 8002136:	b983      	cbnz	r3, 800215a <HAL_TIM_PeriodElapsedCallback+0x32a>
 8002138:	7829      	ldrb	r1, [r5, #0]
 800213a:	297c      	cmp	r1, #124	; 0x7c
 800213c:	d103      	bne.n	8002146 <HAL_TIM_PeriodElapsedCallback+0x316>
			if(temperatura!=0)temperatura--;
 800213e:	7811      	ldrb	r1, [r2, #0]
 8002140:	b109      	cbz	r1, 8002146 <HAL_TIM_PeriodElapsedCallback+0x316>
 8002142:	3901      	subs	r1, #1
 8002144:	7011      	strb	r1, [r2, #0]
		}
		if(Enc==124&&lastEnc==0){
			if(temperatura!=70)temperatura++;
		}
		else{
			if(Enc-lastEnc<0&&temperatura!=0)temperatura+=Enc-lastEnc;
 8002146:	782c      	ldrb	r4, [r5, #0]
 8002148:	1b19      	subs	r1, r3, r4
 800214a:	2900      	cmp	r1, #0
 800214c:	f280 8112 	bge.w	8002374 <HAL_TIM_PeriodElapsedCallback+0x544>
 8002150:	7811      	ldrb	r1, [r2, #0]
 8002152:	b191      	cbz	r1, 800217a <HAL_TIM_PeriodElapsedCallback+0x34a>
 8002154:	1b09      	subs	r1, r1, r4
 8002156:	440b      	add	r3, r1
 8002158:	e008      	b.n	800216c <HAL_TIM_PeriodElapsedCallback+0x33c>
		if(Enc==124&&lastEnc==0){
 800215a:	2b7c      	cmp	r3, #124	; 0x7c
 800215c:	d1f3      	bne.n	8002146 <HAL_TIM_PeriodElapsedCallback+0x316>
 800215e:	7829      	ldrb	r1, [r5, #0]
 8002160:	2900      	cmp	r1, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_TIM_PeriodElapsedCallback+0x316>
			if(temperatura!=70)temperatura++;
 8002164:	7813      	ldrb	r3, [r2, #0]
 8002166:	2b46      	cmp	r3, #70	; 0x46
 8002168:	d001      	beq.n	800216e <HAL_TIM_PeriodElapsedCallback+0x33e>
 800216a:	3301      	adds	r3, #1
			if(Enc-lastEnc>0&&temperatura!=70)temperatura+=Enc-lastEnc;
 800216c:	7013      	strb	r3, [r2, #0]
		}
		if(tempmedida>=temperatura){
 800216e:	4b93      	ldr	r3, [pc, #588]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002170:	7819      	ldrb	r1, [r3, #0]
 8002172:	7813      	ldrb	r3, [r2, #0]
 8002174:	4299      	cmp	r1, r3
 8002176:	f0c0 8106 	bcc.w	8002386 <HAL_TIM_PeriodElapsedCallback+0x556>
			cool=1;
 800217a:	2301      	movs	r3, #1
			cool=0;
		}



		if(pos==0){
 800217c:	4c90      	ldr	r4, [pc, #576]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x590>)
			cool=0;
 800217e:	703b      	strb	r3, [r7, #0]
		if(pos==0){
 8002180:	7823      	ldrb	r3, [r4, #0]
 8002182:	bb9b      	cbnz	r3, 80021ec <HAL_TIM_PeriodElapsedCallback+0x3bc>
			if(lamps[0]==1)HAL_GPIO_WritePin(GPIOA, H1, GPIO_PIN_SET);
 8002184:	4b8f      	ldr	r3, [pc, #572]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	2a01      	cmp	r2, #1
 800218a:	4698      	mov	r8, r3
 800218c:	d103      	bne.n	8002196 <HAL_TIM_PeriodElapsedCallback+0x366>
 800218e:	2102      	movs	r1, #2
 8002190:	4883      	ldr	r0, [pc, #524]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002192:	f7fe fbc1 	bl	8000918 <HAL_GPIO_WritePin>
			if(lamps[0]==0)HAL_GPIO_WritePin(GPIOA, H1, GPIO_PIN_RESET);
 8002196:	f898 2000 	ldrb.w	r2, [r8]
 800219a:	b91a      	cbnz	r2, 80021a4 <HAL_TIM_PeriodElapsedCallback+0x374>
 800219c:	2102      	movs	r1, #2
 800219e:	4880      	ldr	r0, [pc, #512]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80021a0:	f7fe fbba 	bl	8000918 <HAL_GPIO_WritePin>
			if(lamps[3]==1)HAL_GPIO_WritePin(GPIOA, H2, GPIO_PIN_SET);
 80021a4:	f898 2003 	ldrb.w	r2, [r8, #3]
 80021a8:	2a01      	cmp	r2, #1
 80021aa:	d103      	bne.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x384>
 80021ac:	2110      	movs	r1, #16
 80021ae:	487c      	ldr	r0, [pc, #496]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80021b0:	f7fe fbb2 	bl	8000918 <HAL_GPIO_WritePin>
			if(lamps[3]==0)HAL_GPIO_WritePin(GPIOA, H2, GPIO_PIN_RESET);
 80021b4:	f898 2003 	ldrb.w	r2, [r8, #3]
 80021b8:	b91a      	cbnz	r2, 80021c2 <HAL_TIM_PeriodElapsedCallback+0x392>
 80021ba:	2110      	movs	r1, #16
 80021bc:	4878      	ldr	r0, [pc, #480]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80021be:	f7fe fbab 	bl	8000918 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, H3, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c8:	4875      	ldr	r0, [pc, #468]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80021ca:	f7fe fba5 	bl	8000918 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, V1, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2101      	movs	r1, #1
 80021d2:	487d      	ldr	r0, [pc, #500]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80021d4:	f7fe fba0 	bl	8000918 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, V2, GPIO_PIN_SET);
 80021d8:	2201      	movs	r2, #1
 80021da:	4611      	mov	r1, r2
 80021dc:	487b      	ldr	r0, [pc, #492]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80021de:	f7fe fb9b 	bl	8000918 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, V3, GPIO_PIN_SET);
 80021e2:	2201      	movs	r2, #1
 80021e4:	2102      	movs	r1, #2
 80021e6:	4879      	ldr	r0, [pc, #484]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80021e8:	f7fe fb96 	bl	8000918 <HAL_GPIO_WritePin>
		}
		if(pos==1){
 80021ec:	7823      	ldrb	r3, [r4, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d16f      	bne.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0x4a2>
			if(lamps[1]==1)HAL_GPIO_WritePin(GPIOA, H1, GPIO_PIN_SET);
 80021f2:	4b74      	ldr	r3, [pc, #464]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80021f4:	785a      	ldrb	r2, [r3, #1]
 80021f6:	2a01      	cmp	r2, #1
 80021f8:	4698      	mov	r8, r3
 80021fa:	d103      	bne.n	8002204 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 80021fc:	2102      	movs	r1, #2
 80021fe:	4868      	ldr	r0, [pc, #416]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002200:	f7fe fb8a 	bl	8000918 <HAL_GPIO_WritePin>
			if(lamps[1]==0)HAL_GPIO_WritePin(GPIOA, H1, GPIO_PIN_RESET);
 8002204:	f898 2001 	ldrb.w	r2, [r8, #1]
 8002208:	b91a      	cbnz	r2, 8002212 <HAL_TIM_PeriodElapsedCallback+0x3e2>
 800220a:	2102      	movs	r1, #2
 800220c:	4864      	ldr	r0, [pc, #400]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800220e:	f7fe fb83 	bl	8000918 <HAL_GPIO_WritePin>
			if(lamps[4]==1)HAL_GPIO_WritePin(GPIOA, H2, GPIO_PIN_SET);
 8002212:	f898 2004 	ldrb.w	r2, [r8, #4]
 8002216:	2a01      	cmp	r2, #1
 8002218:	d103      	bne.n	8002222 <HAL_TIM_PeriodElapsedCallback+0x3f2>
 800221a:	2110      	movs	r1, #16
 800221c:	4860      	ldr	r0, [pc, #384]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800221e:	f7fe fb7b 	bl	8000918 <HAL_GPIO_WritePin>
			if(lamps[4]==0)HAL_GPIO_WritePin(GPIOA, H2, GPIO_PIN_RESET);
 8002222:	f898 2004 	ldrb.w	r2, [r8, #4]
 8002226:	b91a      	cbnz	r2, 8002230 <HAL_TIM_PeriodElapsedCallback+0x400>
 8002228:	2110      	movs	r1, #16
 800222a:	485d      	ldr	r0, [pc, #372]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800222c:	f7fe fb74 	bl	8000918 <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(GPIOA, ESW))ap[8]=0;
 8002230:	2101      	movs	r1, #1
 8002232:	485b      	ldr	r0, [pc, #364]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002234:	f7fe fb6a 	bl	800090c <HAL_GPIO_ReadPin>
 8002238:	b110      	cbz	r0, 8002240 <HAL_TIM_PeriodElapsedCallback+0x410>
 800223a:	4b55      	ldr	r3, [pc, #340]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800223c:	2200      	movs	r2, #0
 800223e:	721a      	strb	r2, [r3, #8]
			if(!HAL_GPIO_ReadPin (GPIOA, ESW)&&ap[8]==0)cool=!cool,ap[8]=1;
 8002240:	2101      	movs	r1, #1
 8002242:	4857      	ldr	r0, [pc, #348]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002244:	f7fe fb62 	bl	800090c <HAL_GPIO_ReadPin>
 8002248:	b948      	cbnz	r0, 800225e <HAL_TIM_PeriodElapsedCallback+0x42e>
 800224a:	4a51      	ldr	r2, [pc, #324]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800224c:	7a13      	ldrb	r3, [r2, #8]
 800224e:	b933      	cbnz	r3, 800225e <HAL_TIM_PeriodElapsedCallback+0x42e>
 8002250:	783b      	ldrb	r3, [r7, #0]
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	703b      	strb	r3, [r7, #0]
 800225a:	2301      	movs	r3, #1
 800225c:	7213      	strb	r3, [r2, #8]
			if(janelas[0]==1){
 800225e:	4b5c      	ldr	r3, [pc, #368]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	2a01      	cmp	r2, #1
 8002264:	4698      	mov	r8, r3
 8002266:	d109      	bne.n	800227c <HAL_TIM_PeriodElapsedCallback+0x44c>
				HAL_GPIO_WritePin(GPIOA, H3, GPIO_PIN_SET);
 8002268:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800226c:	484c      	ldr	r0, [pc, #304]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800226e:	f7fe fb53 	bl	8000918 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, JANELA_ABERTA);
 8002272:	4b58      	ldr	r3, [pc, #352]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800227a:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(janelas[0]==0){
 800227c:	f898 2000 	ldrb.w	r2, [r8]
 8002280:	b94a      	cbnz	r2, 8002296 <HAL_TIM_PeriodElapsedCallback+0x466>
				HAL_GPIO_WritePin(GPIOA, H3, GPIO_PIN_RESET);
 8002282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002286:	4846      	ldr	r0, [pc, #280]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002288:	f7fe fb46 	bl	8000918 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, JANELA_FECHADA);
 800228c:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(cool==1) HAL_GPIO_WritePin(GPIOB, C1, GPIO_PIN_SET);
 8002296:	783a      	ldrb	r2, [r7, #0]
 8002298:	2a01      	cmp	r2, #1
 800229a:	d104      	bne.n	80022a6 <HAL_TIM_PeriodElapsedCallback+0x476>
 800229c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022a0:	4849      	ldr	r0, [pc, #292]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80022a2:	f7fe fb39 	bl	8000918 <HAL_GPIO_WritePin>

			if(cool==0) HAL_GPIO_WritePin(GPIOB, C1, GPIO_PIN_RESET);
 80022a6:	783a      	ldrb	r2, [r7, #0]
 80022a8:	b922      	cbnz	r2, 80022b4 <HAL_TIM_PeriodElapsedCallback+0x484>
 80022aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022ae:	4846      	ldr	r0, [pc, #280]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80022b0:	f7fe fb32 	bl	8000918 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOB, V1, GPIO_PIN_SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	4611      	mov	r1, r2
 80022b8:	4843      	ldr	r0, [pc, #268]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80022ba:	f7fe fb2d 	bl	8000918 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, V2, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	2101      	movs	r1, #1
 80022c2:	4842      	ldr	r0, [pc, #264]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80022c4:	f7fe fb28 	bl	8000918 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, V3, GPIO_PIN_SET);
 80022c8:	2201      	movs	r2, #1
 80022ca:	2102      	movs	r1, #2
 80022cc:	483f      	ldr	r0, [pc, #252]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80022ce:	f7fe fb23 	bl	8000918 <HAL_GPIO_WritePin>
		}
		if(pos==2){
 80022d2:	7821      	ldrb	r1, [r4, #0]
 80022d4:	2902      	cmp	r1, #2
 80022d6:	d142      	bne.n	800235e <HAL_TIM_PeriodElapsedCallback+0x52e>
			if(lamps[2]==1)HAL_GPIO_WritePin(GPIOA, H1, GPIO_PIN_SET);
 80022d8:	4f3a      	ldr	r7, [pc, #232]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x594>)
 80022da:	78ba      	ldrb	r2, [r7, #2]
 80022dc:	2a01      	cmp	r2, #1
 80022de:	d102      	bne.n	80022e6 <HAL_TIM_PeriodElapsedCallback+0x4b6>
 80022e0:	482f      	ldr	r0, [pc, #188]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80022e2:	f7fe fb19 	bl	8000918 <HAL_GPIO_WritePin>
			if(lamps[2]==0)HAL_GPIO_WritePin(GPIOA, H1, GPIO_PIN_RESET);
 80022e6:	78ba      	ldrb	r2, [r7, #2]
 80022e8:	b91a      	cbnz	r2, 80022f2 <HAL_TIM_PeriodElapsedCallback+0x4c2>
 80022ea:	2102      	movs	r1, #2
 80022ec:	482c      	ldr	r0, [pc, #176]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80022ee:	f7fe fb13 	bl	8000918 <HAL_GPIO_WritePin>
			if(lamps[5]==1)HAL_GPIO_WritePin(GPIOA, H2, GPIO_PIN_SET);
 80022f2:	797a      	ldrb	r2, [r7, #5]
 80022f4:	2a01      	cmp	r2, #1
 80022f6:	d103      	bne.n	8002300 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 80022f8:	2110      	movs	r1, #16
 80022fa:	4829      	ldr	r0, [pc, #164]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80022fc:	f7fe fb0c 	bl	8000918 <HAL_GPIO_WritePin>
			if(lamps[5]==0)HAL_GPIO_WritePin(GPIOA, H2, GPIO_PIN_RESET);
 8002300:	797a      	ldrb	r2, [r7, #5]
 8002302:	b91a      	cbnz	r2, 800230c <HAL_TIM_PeriodElapsedCallback+0x4dc>
 8002304:	2110      	movs	r1, #16
 8002306:	4826      	ldr	r0, [pc, #152]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002308:	f7fe fb06 	bl	8000918 <HAL_GPIO_WritePin>

			if(janelas[1]==1){
 800230c:	4f30      	ldr	r7, [pc, #192]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800230e:	787a      	ldrb	r2, [r7, #1]
 8002310:	2a01      	cmp	r2, #1
 8002312:	d109      	bne.n	8002328 <HAL_TIM_PeriodElapsedCallback+0x4f8>
				HAL_GPIO_WritePin(GPIOA, H3, GPIO_PIN_SET);
 8002314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002318:	4821      	ldr	r0, [pc, #132]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800231a:	f7fe fafd 	bl	8000918 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, JANELA_ABERTA);
 800231e:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002326:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(janelas[1]==0){
 8002328:	787a      	ldrb	r2, [r7, #1]
 800232a:	b94a      	cbnz	r2, 8002340 <HAL_TIM_PeriodElapsedCallback+0x510>
				HAL_GPIO_WritePin(GPIOA, H3, GPIO_PIN_RESET);
 800232c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002330:	481b      	ldr	r0, [pc, #108]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002332:	f7fe faf1 	bl	8000918 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, JANELA_FECHADA);
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			HAL_GPIO_WritePin(GPIOB, V1, GPIO_PIN_SET);
 8002340:	2201      	movs	r2, #1
 8002342:	4611      	mov	r1, r2
 8002344:	4820      	ldr	r0, [pc, #128]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002346:	f7fe fae7 	bl	8000918 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, V2, GPIO_PIN_SET);
 800234a:	2201      	movs	r2, #1
 800234c:	4611      	mov	r1, r2
 800234e:	481f      	ldr	r0, [pc, #124]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002350:	f7fe fae2 	bl	8000918 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, V3, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
 8002356:	2102      	movs	r1, #2
 8002358:	481c      	ldr	r0, [pc, #112]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800235a:	f7fe fadd 	bl	8000918 <HAL_GPIO_WritePin>
		}
		pos++;
 800235e:	7823      	ldrb	r3, [r4, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	b2db      	uxtb	r3, r3
		if(pos==3)pos=0;
 8002364:	2b03      	cmp	r3, #3
 8002366:	bf08      	it	eq
 8002368:	2300      	moveq	r3, #0
 800236a:	7023      	strb	r3, [r4, #0]
	}
	lastEnc=Enc;
 800236c:	7833      	ldrb	r3, [r6, #0]
 800236e:	702b      	strb	r3, [r5, #0]
}
 8002370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(Enc-lastEnc>0&&temperatura!=70)temperatura+=Enc-lastEnc;
 8002374:	f43f aefb 	beq.w	800216e <HAL_TIM_PeriodElapsedCallback+0x33e>
 8002378:	7810      	ldrb	r0, [r2, #0]
 800237a:	2846      	cmp	r0, #70	; 0x46
 800237c:	f43f aef7 	beq.w	800216e <HAL_TIM_PeriodElapsedCallback+0x33e>
 8002380:	1b00      	subs	r0, r0, r4
 8002382:	4403      	add	r3, r0
 8002384:	e6f2      	b.n	800216c <HAL_TIM_PeriodElapsedCallback+0x33c>
			cool=0;
 8002386:	2300      	movs	r3, #0
 8002388:	e6f8      	b.n	800217c <HAL_TIM_PeriodElapsedCallback+0x34c>
			if(lamps[0]==0)snprintf(MSG, sizeof(MSG), "l10     \n");
 800238a:	4913      	ldr	r1, [pc, #76]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800238c:	e572      	b.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0x44>
 800238e:	bf00      	nop
 8002390:	20000008 	.word	0x20000008
 8002394:	080031e0 	.word	0x080031e0
 8002398:	200000a5 	.word	0x200000a5
 800239c:	200001d4 	.word	0x200001d4
 80023a0:	40020000 	.word	0x40020000
 80023a4:	20000114 	.word	0x20000114
 80023a8:	200000a4 	.word	0x200000a4
 80023ac:	200000bb 	.word	0x200000bb
 80023b0:	40000800 	.word	0x40000800
 80023b4:	2000001c 	.word	0x2000001c
 80023b8:	200000af 	.word	0x200000af
 80023bc:	200000d1 	.word	0x200000d1
 80023c0:	200000bc 	.word	0x200000bc
 80023c4:	200000b5 	.word	0x200000b5
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020800 	.word	0x40020800
 80023d0:	200000b3 	.word	0x200000b3
 80023d4:	20000194 	.word	0x20000194
 80023d8:	080031eb 	.word	0x080031eb
			if(lamps[1]==0)snprintf(MSG, sizeof(MSG), "l20     \n");
 80023dc:	4906      	ldr	r1, [pc, #24]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80023de:	e56f      	b.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x90>
			if(lamps[2]==0)snprintf(MSG, sizeof(MSG), "l30     \n");
 80023e0:	4906      	ldr	r1, [pc, #24]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80023e2:	e593      	b.n	8001f0c <HAL_TIM_PeriodElapsedCallback+0xdc>
			if(lamps[3]==0)snprintf(MSG, sizeof(MSG), "l40     \n");
 80023e4:	4906      	ldr	r1, [pc, #24]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80023e6:	e5b6      	b.n	8001f56 <HAL_TIM_PeriodElapsedCallback+0x126>
			if(lamps[4]==0)snprintf(MSG, sizeof(MSG), "l50     \n");
 80023e8:	4906      	ldr	r1, [pc, #24]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80023ea:	e5d8      	b.n	8001f9e <HAL_TIM_PeriodElapsedCallback+0x16e>
			if(lamps[5]==0)snprintf(MSG, sizeof(MSG), "l60     \n");
 80023ec:	4906      	ldr	r1, [pc, #24]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80023ee:	e5fb      	b.n	8001fe8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			if(janelas[0]==0)snprintf(MSG, sizeof(MSG), "j10     \n");
 80023f0:	4906      	ldr	r1, [pc, #24]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80023f2:	e61e      	b.n	8002032 <HAL_TIM_PeriodElapsedCallback+0x202>
			if(janelas[1]==0)snprintf(MSG, sizeof(MSG), "j20     \n");
 80023f4:	4906      	ldr	r1, [pc, #24]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80023f6:	e640      	b.n	800207a <HAL_TIM_PeriodElapsedCallback+0x24a>
 80023f8:	080031f5 	.word	0x080031f5
 80023fc:	080031ff 	.word	0x080031ff
 8002400:	08003209 	.word	0x08003209
 8002404:	08003213 	.word	0x08003213
 8002408:	0800321d 	.word	0x0800321d
 800240c:	08003227 	.word	0x08003227
 8002410:	08003231 	.word	0x08003231

08002414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002414:	4770      	bx	lr
	...

08002418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002418:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_MspInit+0x3c>)
 800241c:	2100      	movs	r1, #0
 800241e:	9100      	str	r1, [sp, #0]
 8002420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002426:	645a      	str	r2, [r3, #68]	; 0x44
 8002428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800242a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800242e:	9200      	str	r2, [sp, #0]
 8002430:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	9101      	str	r1, [sp, #4]
 8002434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002444:	2005      	movs	r0, #5
  __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002448:	f7fe f90a 	bl	8000660 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244c:	b003      	add	sp, #12
 800244e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800

08002458 <NMI_Handler>:
 8002458:	4770      	bx	lr

0800245a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245a:	e7fe      	b.n	800245a <HardFault_Handler>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	e7fe      	b.n	800245c <MemManage_Handler>

0800245e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245e:	e7fe      	b.n	800245e <BusFault_Handler>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	e7fe      	b.n	8002460 <UsageFault_Handler>

08002462 <SVC_Handler>:
 8002462:	4770      	bx	lr

08002464 <DebugMon_Handler>:
 8002464:	4770      	bx	lr

08002466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002466:	4770      	bx	lr

08002468 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002468:	f7fe b8e8 	b.w	800063c <HAL_IncTick>

0800246c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800246c:	4801      	ldr	r0, [pc, #4]	; (8002474 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800246e:	f7fe bdbb 	b.w	8000fe8 <HAL_TIM_IRQHandler>
 8002472:	bf00      	nop
 8002474:	20000114 	.word	0x20000114

08002478 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002478:	4801      	ldr	r0, [pc, #4]	; (8002480 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 800247a:	f7fe bdb5 	b.w	8000fe8 <HAL_TIM_IRQHandler>
 800247e:	bf00      	nop
 8002480:	20000154 	.word	0x20000154

08002484 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002484:	4801      	ldr	r0, [pc, #4]	; (800248c <USART2_IRQHandler+0x8>)
 8002486:	f7ff b9f9 	b.w	800187c <HAL_UART_IRQHandler>
 800248a:	bf00      	nop
 800248c:	200001d4 	.word	0x200001d4

08002490 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002490:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <_sbrk+0x2c>)
 8002494:	6819      	ldr	r1, [r3, #0]
{
 8002496:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002498:	b909      	cbnz	r1, 800249e <_sbrk+0xe>
		heap_end = &end;
 800249a:	4909      	ldr	r1, [pc, #36]	; (80024c0 <_sbrk+0x30>)
 800249c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800249e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80024a0:	4669      	mov	r1, sp
 80024a2:	4402      	add	r2, r0
 80024a4:	428a      	cmp	r2, r1
 80024a6:	d906      	bls.n	80024b6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80024a8:	f000 f9fe 	bl	80028a8 <__errno>
 80024ac:	230c      	movs	r3, #12
 80024ae:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80024b6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80024b8:	bd08      	pop	{r3, pc}
 80024ba:	bf00      	nop
 80024bc:	200000c0 	.word	0x200000c0
 80024c0:	20000218 	.word	0x20000218

080024c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <SystemInit+0x18>)
 80024c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024ca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80024ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024e0:	b510      	push	{r4, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 80024e4:	2100      	movs	r1, #0
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	a803      	add	r0, sp, #12
 80024ea:	f000 fa07 	bl	80028fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim4.Instance = TIM4;
 80024ee:	4811      	ldr	r0, [pc, #68]	; (8002534 <MX_TIM4_Init+0x54>)
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_TIM4_Init+0x58>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f2:	2400      	movs	r4, #0
  htim4.Init.Prescaler = 0;
 80024f4:	e880 0018 	stmia.w	r0, {r3, r4}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 499;
 80024f8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80024fc:	60c3      	str	r3, [r0, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80024fe:	a903      	add	r1, sp, #12
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002500:	2301      	movs	r3, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002502:	9401      	str	r4, [sp, #4]
 8002504:	9402      	str	r4, [sp, #8]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	6084      	str	r4, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	6104      	str	r4, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250a:	6184      	str	r4, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800250c:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800250e:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002510:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002512:	f7fe fea5 	bl	8001260 <HAL_TIM_Encoder_Init>
 8002516:	b108      	cbz	r0, 800251c <MX_TIM4_Init+0x3c>
  {
    Error_Handler();
 8002518:	f7ff ff7c 	bl	8002414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800251c:	a901      	add	r1, sp, #4
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_TIM4_Init+0x54>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002520:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002522:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002524:	f7fe ffae 	bl	8001484 <HAL_TIMEx_MasterConfigSynchronization>
 8002528:	b108      	cbz	r0, 800252e <MX_TIM4_Init+0x4e>
  {
    Error_Handler();
 800252a:	f7ff ff73 	bl	8002414 <Error_Handler>
  }

}
 800252e:	b00c      	add	sp, #48	; 0x30
 8002530:	bd10      	pop	{r4, pc}
 8002532:	bf00      	nop
 8002534:	200000d4 	.word	0x200000d4
 8002538:	40000800 	.word	0x40000800

0800253c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 800253c:	480a      	ldr	r0, [pc, #40]	; (8002568 <MX_TIM10_Init+0x2c>)
  htim10.Init.Prescaler = 9;
 800253e:	490b      	ldr	r1, [pc, #44]	; (800256c <MX_TIM10_Init+0x30>)
{
 8002540:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 9;
 8002542:	2309      	movs	r3, #9
 8002544:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 9999;
 8002548:	f242 720f 	movw	r2, #9999	; 0x270f
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254c:	2300      	movs	r3, #0
 800254e:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 9999;
 8002550:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002552:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002554:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002556:	f7fe fe4f 	bl	80011f8 <HAL_TIM_Base_Init>
 800255a:	b118      	cbz	r0, 8002564 <MX_TIM10_Init+0x28>
  {
    Error_Handler();
  }

}
 800255c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002560:	f7ff bf58 	b.w	8002414 <Error_Handler>
 8002564:	bd08      	pop	{r3, pc}
 8002566:	bf00      	nop
 8002568:	20000114 	.word	0x20000114
 800256c:	40014400 	.word	0x40014400

08002570 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{

  htim11.Instance = TIM11;
 8002570:	480a      	ldr	r0, [pc, #40]	; (800259c <MX_TIM11_Init+0x2c>)
  htim11.Init.Prescaler = 999;
 8002572:	490b      	ldr	r1, [pc, #44]	; (80025a0 <MX_TIM11_Init+0x30>)
{
 8002574:	b508      	push	{r3, lr}
  htim11.Init.Prescaler = 999;
 8002576:	f240 33e7 	movw	r3, #999	; 0x3e7
 800257a:	e880 000a 	stmia.w	r0, {r1, r3}
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 9999;
 800257e:	f242 720f 	movw	r2, #9999	; 0x270f
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002582:	2300      	movs	r3, #0
 8002584:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 9999;
 8002586:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002588:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800258c:	f7fe fe34 	bl	80011f8 <HAL_TIM_Base_Init>
 8002590:	b118      	cbz	r0, 800259a <MX_TIM11_Init+0x2a>
  {
    Error_Handler();
  }

}
 8002592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002596:	f7ff bf3d 	b.w	8002414 <Error_Handler>
 800259a:	bd08      	pop	{r3, pc}
 800259c:	20000154 	.word	0x20000154
 80025a0:	40014800 	.word	0x40014800

080025a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 80025a4:	6803      	ldr	r3, [r0, #0]
 80025a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80025aa:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM2)
 80025ac:	d10b      	bne.n	80025c6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_TIM_PWM_MspInit+0x28>)
 80025b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025c6:	b002      	add	sp, #8
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800

080025d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025d0:	b510      	push	{r4, lr}
 80025d2:	4604      	mov	r4, r0
 80025d4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d6:	2214      	movs	r2, #20
 80025d8:	2100      	movs	r1, #0
 80025da:	a803      	add	r0, sp, #12
 80025dc:	f000 f98e 	bl	80028fc <memset>
  if(tim_encoderHandle->Instance==TIM4)
 80025e0:	6822      	ldr	r2, [r4, #0]
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_TIM_Encoder_MspInit+0x5c>)
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d11f      	bne.n	8002628 <HAL_TIM_Encoder_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025e8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80025ec:	2100      	movs	r1, #0
 80025ee:	9101      	str	r1, [sp, #4]
 80025f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = CLK_Pin|DT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f2:	480f      	ldr	r0, [pc, #60]	; (8002630 <HAL_TIM_Encoder_MspInit+0x60>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025f4:	f042 0204 	orr.w	r2, r2, #4
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
 80025fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fc:	f002 0204 	and.w	r2, r2, #4
 8002600:	9201      	str	r2, [sp, #4]
 8002602:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	9102      	str	r1, [sp, #8]
 8002606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002608:	f042 0202 	orr.w	r2, r2, #2
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	9302      	str	r3, [sp, #8]
 8002616:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CLK_Pin|DT_Pin;
 8002618:	23c0      	movs	r3, #192	; 0xc0
 800261a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002622:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002624:	f7fe f898 	bl	8000758 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002628:	b008      	add	sp, #32
 800262a:	bd10      	pop	{r4, pc}
 800262c:	40000800 	.word	0x40000800
 8002630:	40020400 	.word	0x40020400

08002634 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002634:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM10)
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_TIM_Base_MspInit+0x60>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d115      	bne.n	800266a <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_TIM_Base_MspInit+0x64>)
 8002640:	2200      	movs	r2, #0
 8002642:	9200      	str	r2, [sp, #0]
 8002644:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002646:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800264a:	6459      	str	r1, [r3, #68]	; 0x44
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	9300      	str	r3, [sp, #0]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002654:	2019      	movs	r0, #25
 8002656:	2101      	movs	r1, #1
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002658:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800265a:	f7fe f813 	bl	8000684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800265e:	2019      	movs	r0, #25
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002660:	f7fe f844 	bl	80006ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002664:	b003      	add	sp, #12
 8002666:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM11)
 800266a:	4a0c      	ldr	r2, [pc, #48]	; (800269c <HAL_TIM_Base_MspInit+0x68>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d1f9      	bne.n	8002664 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_TIM_Base_MspInit+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	9201      	str	r2, [sp, #4]
 8002676:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002678:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800267c:	6459      	str	r1, [r3, #68]	; 0x44
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002684:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8002686:	201a      	movs	r0, #26
 8002688:	2102      	movs	r1, #2
    __HAL_RCC_TIM11_CLK_ENABLE();
 800268a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 800268c:	f7fd fffa 	bl	8000684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002690:	201a      	movs	r0, #26
 8002692:	e7e5      	b.n	8002660 <HAL_TIM_Base_MspInit+0x2c>
 8002694:	40014400 	.word	0x40014400
 8002698:	40023800 	.word	0x40023800
 800269c:	40014800 	.word	0x40014800

080026a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	4604      	mov	r4, r0
 80026a4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a6:	2214      	movs	r2, #20
 80026a8:	2100      	movs	r1, #0
 80026aa:	a803      	add	r0, sp, #12
 80026ac:	f000 f926 	bl	80028fc <memset>
  if(timHandle->Instance==TIM2)
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b6:	d12b      	bne.n	8002710 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80026bc:	2400      	movs	r4, #0
 80026be:	9401      	str	r4, [sp, #4]
 80026c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = J2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 80026c2:	4814      	ldr	r0, [pc, #80]	; (8002714 <HAL_TIM_MspPostInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c4:	f042 0202 	orr.w	r2, r2, #2
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
 80026ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026cc:	f002 0202 	and.w	r2, r2, #2
 80026d0:	9201      	str	r2, [sp, #4]
 80026d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	9402      	str	r4, [sp, #8]
 80026d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	9302      	str	r3, [sp, #8]
 80026e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = J2_Pin;
 80026ea:	2304      	movs	r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ec:	2501      	movs	r5, #1
    HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 80026ee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = J2_Pin;
 80026f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026f4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 80026f6:	f7fe f82f 	bl	8000758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = J1_Pin;
 80026fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 80026fe:	a903      	add	r1, sp, #12
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Pin = J1_Pin;
 8002702:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800270a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 800270c:	f7fe f824 	bl	8000758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002710:	b008      	add	sp, #32
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	40020400 	.word	0x40020400
 8002718:	40020000 	.word	0x40020000

0800271c <MX_TIM2_Init>:
{
 800271c:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271e:	2400      	movs	r4, #0
{
 8002720:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002722:	221c      	movs	r2, #28
 8002724:	4621      	mov	r1, r4
 8002726:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002728:	9401      	str	r4, [sp, #4]
 800272a:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800272c:	f000 f8e6 	bl	80028fc <memset>
  htim2.Instance = TIM2;
 8002730:	481a      	ldr	r0, [pc, #104]	; (800279c <MX_TIM2_Init+0x80>)
  htim2.Init.Prescaler = 167;
 8002732:	23a7      	movs	r3, #167	; 0xa7
 8002734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002738:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.Period = 9999;
 800273c:	f242 730f 	movw	r3, #9999	; 0x270f
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002740:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 9999;
 8002742:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002744:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002746:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002748:	f7fe fd70 	bl	800122c <HAL_TIM_PWM_Init>
 800274c:	b108      	cbz	r0, 8002752 <MX_TIM2_Init+0x36>
    Error_Handler();
 800274e:	f7ff fe61 	bl	8002414 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002752:	a901      	add	r1, sp, #4
 8002754:	4811      	ldr	r0, [pc, #68]	; (800279c <MX_TIM2_Init+0x80>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002756:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002758:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800275a:	f7fe fe93 	bl	8001484 <HAL_TIMEx_MasterConfigSynchronization>
 800275e:	b108      	cbz	r0, 8002764 <MX_TIM2_Init+0x48>
    Error_Handler();
 8002760:	f7ff fe58 	bl	8002414 <Error_Handler>
  sConfigOC.Pulse = 0;
 8002764:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002766:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002768:	a903      	add	r1, sp, #12
 800276a:	480c      	ldr	r0, [pc, #48]	; (800279c <MX_TIM2_Init+0x80>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800276c:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 800276e:	9204      	str	r2, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002770:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002772:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002774:	f7fe fdf6 	bl	8001364 <HAL_TIM_PWM_ConfigChannel>
 8002778:	b108      	cbz	r0, 800277e <MX_TIM2_Init+0x62>
    Error_Handler();
 800277a:	f7ff fe4b 	bl	8002414 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800277e:	220c      	movs	r2, #12
 8002780:	eb0d 0102 	add.w	r1, sp, r2
 8002784:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_TIM2_Init+0x80>)
 8002786:	f7fe fded 	bl	8001364 <HAL_TIM_PWM_ConfigChannel>
 800278a:	b108      	cbz	r0, 8002790 <MX_TIM2_Init+0x74>
    Error_Handler();
 800278c:	f7ff fe42 	bl	8002414 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <MX_TIM2_Init+0x80>)
 8002792:	f7ff ff85 	bl	80026a0 <HAL_TIM_MspPostInit>
}
 8002796:	b00a      	add	sp, #40	; 0x28
 8002798:	bd10      	pop	{r4, pc}
 800279a:	bf00      	nop
 800279c:	20000194 	.word	0x20000194

080027a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027a0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80027a2:	480b      	ldr	r0, [pc, #44]	; (80027d0 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <MX_USART2_UART_Init+0x34>)
 80027a6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80027aa:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027ae:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027b0:	2300      	movs	r3, #0
 80027b2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027b4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027b6:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027b8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027bc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027be:	f7fe ff49 	bl	8001654 <HAL_UART_Init>
 80027c2:	b118      	cbz	r0, 80027cc <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80027c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80027c8:	f7ff be24 	b.w	8002414 <Error_Handler>
 80027cc:	bd08      	pop	{r3, pc}
 80027ce:	bf00      	nop
 80027d0:	200001d4 	.word	0x200001d4
 80027d4:	40004400 	.word	0x40004400

080027d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027d8:	b510      	push	{r4, lr}
 80027da:	4604      	mov	r4, r0
 80027dc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027de:	2214      	movs	r2, #20
 80027e0:	2100      	movs	r1, #0
 80027e2:	a803      	add	r0, sp, #12
 80027e4:	f000 f88a 	bl	80028fc <memset>
  if(uartHandle->Instance==USART2)
 80027e8:	6822      	ldr	r2, [r4, #0]
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_UART_MspInit+0x74>)
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d12a      	bne.n	8002846 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80027f4:	2400      	movs	r4, #0
 80027f6:	9401      	str	r4, [sp, #4]
 80027f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fa:	4815      	ldr	r0, [pc, #84]	; (8002850 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
 8002802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002804:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002808:	9201      	str	r2, [sp, #4]
 800280a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280c:	9402      	str	r4, [sp, #8]
 800280e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	9302      	str	r3, [sp, #8]
 800281e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002820:	230c      	movs	r3, #12
 8002822:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800282e:	2307      	movs	r3, #7
 8002830:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	f7fd ff91 	bl	8000758 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002836:	2026      	movs	r0, #38	; 0x26
 8002838:	4622      	mov	r2, r4
 800283a:	4621      	mov	r1, r4
 800283c:	f7fd ff22 	bl	8000684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002840:	2026      	movs	r0, #38	; 0x26
 8002842:	f7fd ff53 	bl	80006ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002846:	b008      	add	sp, #32
 8002848:	bd10      	pop	{r4, pc}
 800284a:	bf00      	nop
 800284c:	40004400 	.word	0x40004400
 8002850:	40020000 	.word	0x40020000

08002854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800288c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002858:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800285a:	e003      	b.n	8002864 <LoopCopyDataInit>

0800285c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800285e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002860:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002862:	3104      	adds	r1, #4

08002864 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002864:	480b      	ldr	r0, [pc, #44]	; (8002894 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002868:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800286a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800286c:	d3f6      	bcc.n	800285c <CopyDataInit>
  ldr  r2, =_sbss
 800286e:	4a0b      	ldr	r2, [pc, #44]	; (800289c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002870:	e002      	b.n	8002878 <LoopFillZerobss>

08002872 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002872:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002874:	f842 3b04 	str.w	r3, [r2], #4

08002878 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800287a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800287c:	d3f9      	bcc.n	8002872 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800287e:	f7ff fe21 	bl	80024c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002882:	f000 f817 	bl	80028b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002886:	f7ff f9af 	bl	8001be8 <main>
  bx  lr    
 800288a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800288c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002890:	080032ac 	.word	0x080032ac
  ldr  r0, =_sdata
 8002894:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002898:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 800289c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80028a0:	20000218 	.word	0x20000218

080028a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a4:	e7fe      	b.n	80028a4 <ADC_IRQHandler>
	...

080028a8 <__errno>:
 80028a8:	4b01      	ldr	r3, [pc, #4]	; (80028b0 <__errno+0x8>)
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000024 	.word	0x20000024

080028b4 <__libc_init_array>:
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	4e0d      	ldr	r6, [pc, #52]	; (80028ec <__libc_init_array+0x38>)
 80028b8:	4c0d      	ldr	r4, [pc, #52]	; (80028f0 <__libc_init_array+0x3c>)
 80028ba:	1ba4      	subs	r4, r4, r6
 80028bc:	10a4      	asrs	r4, r4, #2
 80028be:	2500      	movs	r5, #0
 80028c0:	42a5      	cmp	r5, r4
 80028c2:	d109      	bne.n	80028d8 <__libc_init_array+0x24>
 80028c4:	4e0b      	ldr	r6, [pc, #44]	; (80028f4 <__libc_init_array+0x40>)
 80028c6:	4c0c      	ldr	r4, [pc, #48]	; (80028f8 <__libc_init_array+0x44>)
 80028c8:	f000 fc56 	bl	8003178 <_init>
 80028cc:	1ba4      	subs	r4, r4, r6
 80028ce:	10a4      	asrs	r4, r4, #2
 80028d0:	2500      	movs	r5, #0
 80028d2:	42a5      	cmp	r5, r4
 80028d4:	d105      	bne.n	80028e2 <__libc_init_array+0x2e>
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028dc:	4798      	blx	r3
 80028de:	3501      	adds	r5, #1
 80028e0:	e7ee      	b.n	80028c0 <__libc_init_array+0xc>
 80028e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e6:	4798      	blx	r3
 80028e8:	3501      	adds	r5, #1
 80028ea:	e7f2      	b.n	80028d2 <__libc_init_array+0x1e>
 80028ec:	080032a4 	.word	0x080032a4
 80028f0:	080032a4 	.word	0x080032a4
 80028f4:	080032a4 	.word	0x080032a4
 80028f8:	080032a8 	.word	0x080032a8

080028fc <memset>:
 80028fc:	4402      	add	r2, r0
 80028fe:	4603      	mov	r3, r0
 8002900:	4293      	cmp	r3, r2
 8002902:	d100      	bne.n	8002906 <memset+0xa>
 8002904:	4770      	bx	lr
 8002906:	f803 1b01 	strb.w	r1, [r3], #1
 800290a:	e7f9      	b.n	8002900 <memset+0x4>

0800290c <sniprintf>:
 800290c:	b40c      	push	{r2, r3}
 800290e:	b530      	push	{r4, r5, lr}
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <sniprintf+0x64>)
 8002912:	1e0c      	subs	r4, r1, #0
 8002914:	b09d      	sub	sp, #116	; 0x74
 8002916:	681d      	ldr	r5, [r3, #0]
 8002918:	da08      	bge.n	800292c <sniprintf+0x20>
 800291a:	238b      	movs	r3, #139	; 0x8b
 800291c:	602b      	str	r3, [r5, #0]
 800291e:	f04f 30ff 	mov.w	r0, #4294967295
 8002922:	b01d      	add	sp, #116	; 0x74
 8002924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002928:	b002      	add	sp, #8
 800292a:	4770      	bx	lr
 800292c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002930:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002934:	bf14      	ite	ne
 8002936:	f104 33ff 	addne.w	r3, r4, #4294967295
 800293a:	4623      	moveq	r3, r4
 800293c:	9304      	str	r3, [sp, #16]
 800293e:	9307      	str	r3, [sp, #28]
 8002940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002944:	9002      	str	r0, [sp, #8]
 8002946:	9006      	str	r0, [sp, #24]
 8002948:	f8ad 3016 	strh.w	r3, [sp, #22]
 800294c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800294e:	ab21      	add	r3, sp, #132	; 0x84
 8002950:	a902      	add	r1, sp, #8
 8002952:	4628      	mov	r0, r5
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	f000 f871 	bl	8002a3c <_svfiprintf_r>
 800295a:	1c43      	adds	r3, r0, #1
 800295c:	bfbc      	itt	lt
 800295e:	238b      	movlt	r3, #139	; 0x8b
 8002960:	602b      	strlt	r3, [r5, #0]
 8002962:	2c00      	cmp	r4, #0
 8002964:	d0dd      	beq.n	8002922 <sniprintf+0x16>
 8002966:	9b02      	ldr	r3, [sp, #8]
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e7d9      	b.n	8002922 <sniprintf+0x16>
 800296e:	bf00      	nop
 8002970:	20000024 	.word	0x20000024

08002974 <strcpy>:
 8002974:	4603      	mov	r3, r0
 8002976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800297a:	f803 2b01 	strb.w	r2, [r3], #1
 800297e:	2a00      	cmp	r2, #0
 8002980:	d1f9      	bne.n	8002976 <strcpy+0x2>
 8002982:	4770      	bx	lr

08002984 <__ssputs_r>:
 8002984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002988:	688e      	ldr	r6, [r1, #8]
 800298a:	429e      	cmp	r6, r3
 800298c:	4682      	mov	sl, r0
 800298e:	460c      	mov	r4, r1
 8002990:	4691      	mov	r9, r2
 8002992:	4698      	mov	r8, r3
 8002994:	d835      	bhi.n	8002a02 <__ssputs_r+0x7e>
 8002996:	898a      	ldrh	r2, [r1, #12]
 8002998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800299c:	d031      	beq.n	8002a02 <__ssputs_r+0x7e>
 800299e:	6825      	ldr	r5, [r4, #0]
 80029a0:	6909      	ldr	r1, [r1, #16]
 80029a2:	1a6f      	subs	r7, r5, r1
 80029a4:	6965      	ldr	r5, [r4, #20]
 80029a6:	2302      	movs	r3, #2
 80029a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80029b0:	f108 0301 	add.w	r3, r8, #1
 80029b4:	443b      	add	r3, r7
 80029b6:	429d      	cmp	r5, r3
 80029b8:	bf38      	it	cc
 80029ba:	461d      	movcc	r5, r3
 80029bc:	0553      	lsls	r3, r2, #21
 80029be:	d531      	bpl.n	8002a24 <__ssputs_r+0xa0>
 80029c0:	4629      	mov	r1, r5
 80029c2:	f000 fb39 	bl	8003038 <_malloc_r>
 80029c6:	4606      	mov	r6, r0
 80029c8:	b950      	cbnz	r0, 80029e0 <__ssputs_r+0x5c>
 80029ca:	230c      	movs	r3, #12
 80029cc:	f8ca 3000 	str.w	r3, [sl]
 80029d0:	89a3      	ldrh	r3, [r4, #12]
 80029d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d6:	81a3      	strh	r3, [r4, #12]
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e0:	463a      	mov	r2, r7
 80029e2:	6921      	ldr	r1, [r4, #16]
 80029e4:	f000 fab4 	bl	8002f50 <memcpy>
 80029e8:	89a3      	ldrh	r3, [r4, #12]
 80029ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f2:	81a3      	strh	r3, [r4, #12]
 80029f4:	6126      	str	r6, [r4, #16]
 80029f6:	6165      	str	r5, [r4, #20]
 80029f8:	443e      	add	r6, r7
 80029fa:	1bed      	subs	r5, r5, r7
 80029fc:	6026      	str	r6, [r4, #0]
 80029fe:	60a5      	str	r5, [r4, #8]
 8002a00:	4646      	mov	r6, r8
 8002a02:	4546      	cmp	r6, r8
 8002a04:	bf28      	it	cs
 8002a06:	4646      	movcs	r6, r8
 8002a08:	4632      	mov	r2, r6
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	f000 faaa 	bl	8002f66 <memmove>
 8002a12:	68a3      	ldr	r3, [r4, #8]
 8002a14:	1b9b      	subs	r3, r3, r6
 8002a16:	60a3      	str	r3, [r4, #8]
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	441e      	add	r6, r3
 8002a1c:	6026      	str	r6, [r4, #0]
 8002a1e:	2000      	movs	r0, #0
 8002a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a24:	462a      	mov	r2, r5
 8002a26:	f000 fb65 	bl	80030f4 <_realloc_r>
 8002a2a:	4606      	mov	r6, r0
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d1e1      	bne.n	80029f4 <__ssputs_r+0x70>
 8002a30:	6921      	ldr	r1, [r4, #16]
 8002a32:	4650      	mov	r0, sl
 8002a34:	f000 fab2 	bl	8002f9c <_free_r>
 8002a38:	e7c7      	b.n	80029ca <__ssputs_r+0x46>
	...

08002a3c <_svfiprintf_r>:
 8002a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a40:	b09d      	sub	sp, #116	; 0x74
 8002a42:	4680      	mov	r8, r0
 8002a44:	9303      	str	r3, [sp, #12]
 8002a46:	898b      	ldrh	r3, [r1, #12]
 8002a48:	061c      	lsls	r4, r3, #24
 8002a4a:	460d      	mov	r5, r1
 8002a4c:	4616      	mov	r6, r2
 8002a4e:	d50f      	bpl.n	8002a70 <_svfiprintf_r+0x34>
 8002a50:	690b      	ldr	r3, [r1, #16]
 8002a52:	b96b      	cbnz	r3, 8002a70 <_svfiprintf_r+0x34>
 8002a54:	2140      	movs	r1, #64	; 0x40
 8002a56:	f000 faef 	bl	8003038 <_malloc_r>
 8002a5a:	6028      	str	r0, [r5, #0]
 8002a5c:	6128      	str	r0, [r5, #16]
 8002a5e:	b928      	cbnz	r0, 8002a6c <_svfiprintf_r+0x30>
 8002a60:	230c      	movs	r3, #12
 8002a62:	f8c8 3000 	str.w	r3, [r8]
 8002a66:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6a:	e0c5      	b.n	8002bf8 <_svfiprintf_r+0x1bc>
 8002a6c:	2340      	movs	r3, #64	; 0x40
 8002a6e:	616b      	str	r3, [r5, #20]
 8002a70:	2300      	movs	r3, #0
 8002a72:	9309      	str	r3, [sp, #36]	; 0x24
 8002a74:	2320      	movs	r3, #32
 8002a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a7a:	2330      	movs	r3, #48	; 0x30
 8002a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a80:	f04f 0b01 	mov.w	fp, #1
 8002a84:	4637      	mov	r7, r6
 8002a86:	463c      	mov	r4, r7
 8002a88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d13c      	bne.n	8002b0a <_svfiprintf_r+0xce>
 8002a90:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a94:	d00b      	beq.n	8002aae <_svfiprintf_r+0x72>
 8002a96:	4653      	mov	r3, sl
 8002a98:	4632      	mov	r2, r6
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	4640      	mov	r0, r8
 8002a9e:	f7ff ff71 	bl	8002984 <__ssputs_r>
 8002aa2:	3001      	adds	r0, #1
 8002aa4:	f000 80a3 	beq.w	8002bee <_svfiprintf_r+0x1b2>
 8002aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aaa:	4453      	add	r3, sl
 8002aac:	9309      	str	r3, [sp, #36]	; 0x24
 8002aae:	783b      	ldrb	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 809c 	beq.w	8002bee <_svfiprintf_r+0x1b2>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8002abc:	9304      	str	r3, [sp, #16]
 8002abe:	9307      	str	r3, [sp, #28]
 8002ac0:	9205      	str	r2, [sp, #20]
 8002ac2:	9306      	str	r3, [sp, #24]
 8002ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8002aca:	2205      	movs	r2, #5
 8002acc:	7821      	ldrb	r1, [r4, #0]
 8002ace:	4850      	ldr	r0, [pc, #320]	; (8002c10 <_svfiprintf_r+0x1d4>)
 8002ad0:	f7fd fb9e 	bl	8000210 <memchr>
 8002ad4:	1c67      	adds	r7, r4, #1
 8002ad6:	9b04      	ldr	r3, [sp, #16]
 8002ad8:	b9d8      	cbnz	r0, 8002b12 <_svfiprintf_r+0xd6>
 8002ada:	06d9      	lsls	r1, r3, #27
 8002adc:	bf44      	itt	mi
 8002ade:	2220      	movmi	r2, #32
 8002ae0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ae4:	071a      	lsls	r2, r3, #28
 8002ae6:	bf44      	itt	mi
 8002ae8:	222b      	movmi	r2, #43	; 0x2b
 8002aea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002aee:	7822      	ldrb	r2, [r4, #0]
 8002af0:	2a2a      	cmp	r2, #42	; 0x2a
 8002af2:	d016      	beq.n	8002b22 <_svfiprintf_r+0xe6>
 8002af4:	9a07      	ldr	r2, [sp, #28]
 8002af6:	2100      	movs	r1, #0
 8002af8:	200a      	movs	r0, #10
 8002afa:	4627      	mov	r7, r4
 8002afc:	3401      	adds	r4, #1
 8002afe:	783b      	ldrb	r3, [r7, #0]
 8002b00:	3b30      	subs	r3, #48	; 0x30
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	d951      	bls.n	8002baa <_svfiprintf_r+0x16e>
 8002b06:	b1c9      	cbz	r1, 8002b3c <_svfiprintf_r+0x100>
 8002b08:	e011      	b.n	8002b2e <_svfiprintf_r+0xf2>
 8002b0a:	2b25      	cmp	r3, #37	; 0x25
 8002b0c:	d0c0      	beq.n	8002a90 <_svfiprintf_r+0x54>
 8002b0e:	4627      	mov	r7, r4
 8002b10:	e7b9      	b.n	8002a86 <_svfiprintf_r+0x4a>
 8002b12:	4a3f      	ldr	r2, [pc, #252]	; (8002c10 <_svfiprintf_r+0x1d4>)
 8002b14:	1a80      	subs	r0, r0, r2
 8002b16:	fa0b f000 	lsl.w	r0, fp, r0
 8002b1a:	4318      	orrs	r0, r3
 8002b1c:	9004      	str	r0, [sp, #16]
 8002b1e:	463c      	mov	r4, r7
 8002b20:	e7d3      	b.n	8002aca <_svfiprintf_r+0x8e>
 8002b22:	9a03      	ldr	r2, [sp, #12]
 8002b24:	1d11      	adds	r1, r2, #4
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	9103      	str	r1, [sp, #12]
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	db01      	blt.n	8002b32 <_svfiprintf_r+0xf6>
 8002b2e:	9207      	str	r2, [sp, #28]
 8002b30:	e004      	b.n	8002b3c <_svfiprintf_r+0x100>
 8002b32:	4252      	negs	r2, r2
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	9207      	str	r2, [sp, #28]
 8002b3a:	9304      	str	r3, [sp, #16]
 8002b3c:	783b      	ldrb	r3, [r7, #0]
 8002b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b40:	d10e      	bne.n	8002b60 <_svfiprintf_r+0x124>
 8002b42:	787b      	ldrb	r3, [r7, #1]
 8002b44:	2b2a      	cmp	r3, #42	; 0x2a
 8002b46:	f107 0101 	add.w	r1, r7, #1
 8002b4a:	d132      	bne.n	8002bb2 <_svfiprintf_r+0x176>
 8002b4c:	9b03      	ldr	r3, [sp, #12]
 8002b4e:	1d1a      	adds	r2, r3, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	9203      	str	r2, [sp, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bfb8      	it	lt
 8002b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b5c:	3702      	adds	r7, #2
 8002b5e:	9305      	str	r3, [sp, #20]
 8002b60:	4c2c      	ldr	r4, [pc, #176]	; (8002c14 <_svfiprintf_r+0x1d8>)
 8002b62:	7839      	ldrb	r1, [r7, #0]
 8002b64:	2203      	movs	r2, #3
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7fd fb52 	bl	8000210 <memchr>
 8002b6c:	b138      	cbz	r0, 8002b7e <_svfiprintf_r+0x142>
 8002b6e:	2340      	movs	r3, #64	; 0x40
 8002b70:	1b00      	subs	r0, r0, r4
 8002b72:	fa03 f000 	lsl.w	r0, r3, r0
 8002b76:	9b04      	ldr	r3, [sp, #16]
 8002b78:	4303      	orrs	r3, r0
 8002b7a:	9304      	str	r3, [sp, #16]
 8002b7c:	3701      	adds	r7, #1
 8002b7e:	7839      	ldrb	r1, [r7, #0]
 8002b80:	4825      	ldr	r0, [pc, #148]	; (8002c18 <_svfiprintf_r+0x1dc>)
 8002b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b86:	2206      	movs	r2, #6
 8002b88:	1c7e      	adds	r6, r7, #1
 8002b8a:	f7fd fb41 	bl	8000210 <memchr>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d035      	beq.n	8002bfe <_svfiprintf_r+0x1c2>
 8002b92:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <_svfiprintf_r+0x1e0>)
 8002b94:	b9fb      	cbnz	r3, 8002bd6 <_svfiprintf_r+0x19a>
 8002b96:	9b03      	ldr	r3, [sp, #12]
 8002b98:	3307      	adds	r3, #7
 8002b9a:	f023 0307 	bic.w	r3, r3, #7
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	9303      	str	r3, [sp, #12]
 8002ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ba4:	444b      	add	r3, r9
 8002ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ba8:	e76c      	b.n	8002a84 <_svfiprintf_r+0x48>
 8002baa:	fb00 3202 	mla	r2, r0, r2, r3
 8002bae:	2101      	movs	r1, #1
 8002bb0:	e7a3      	b.n	8002afa <_svfiprintf_r+0xbe>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	9305      	str	r3, [sp, #20]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	240a      	movs	r4, #10
 8002bba:	460f      	mov	r7, r1
 8002bbc:	3101      	adds	r1, #1
 8002bbe:	783a      	ldrb	r2, [r7, #0]
 8002bc0:	3a30      	subs	r2, #48	; 0x30
 8002bc2:	2a09      	cmp	r2, #9
 8002bc4:	d903      	bls.n	8002bce <_svfiprintf_r+0x192>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ca      	beq.n	8002b60 <_svfiprintf_r+0x124>
 8002bca:	9005      	str	r0, [sp, #20]
 8002bcc:	e7c8      	b.n	8002b60 <_svfiprintf_r+0x124>
 8002bce:	fb04 2000 	mla	r0, r4, r0, r2
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e7f1      	b.n	8002bba <_svfiprintf_r+0x17e>
 8002bd6:	ab03      	add	r3, sp, #12
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	462a      	mov	r2, r5
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <_svfiprintf_r+0x1e4>)
 8002bde:	a904      	add	r1, sp, #16
 8002be0:	4640      	mov	r0, r8
 8002be2:	f3af 8000 	nop.w
 8002be6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002bea:	4681      	mov	r9, r0
 8002bec:	d1d9      	bne.n	8002ba2 <_svfiprintf_r+0x166>
 8002bee:	89ab      	ldrh	r3, [r5, #12]
 8002bf0:	065b      	lsls	r3, r3, #25
 8002bf2:	f53f af38 	bmi.w	8002a66 <_svfiprintf_r+0x2a>
 8002bf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bf8:	b01d      	add	sp, #116	; 0x74
 8002bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bfe:	ab03      	add	r3, sp, #12
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	462a      	mov	r2, r5
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <_svfiprintf_r+0x1e4>)
 8002c06:	a904      	add	r1, sp, #16
 8002c08:	4640      	mov	r0, r8
 8002c0a:	f000 f881 	bl	8002d10 <_printf_i>
 8002c0e:	e7ea      	b.n	8002be6 <_svfiprintf_r+0x1aa>
 8002c10:	08003268 	.word	0x08003268
 8002c14:	0800326e 	.word	0x0800326e
 8002c18:	08003272 	.word	0x08003272
 8002c1c:	00000000 	.word	0x00000000
 8002c20:	08002985 	.word	0x08002985

08002c24 <_printf_common>:
 8002c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c28:	4691      	mov	r9, r2
 8002c2a:	461f      	mov	r7, r3
 8002c2c:	688a      	ldr	r2, [r1, #8]
 8002c2e:	690b      	ldr	r3, [r1, #16]
 8002c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c34:	4293      	cmp	r3, r2
 8002c36:	bfb8      	it	lt
 8002c38:	4613      	movlt	r3, r2
 8002c3a:	f8c9 3000 	str.w	r3, [r9]
 8002c3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c42:	4606      	mov	r6, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	b112      	cbz	r2, 8002c4e <_printf_common+0x2a>
 8002c48:	3301      	adds	r3, #1
 8002c4a:	f8c9 3000 	str.w	r3, [r9]
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	0699      	lsls	r1, r3, #26
 8002c52:	bf42      	ittt	mi
 8002c54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c58:	3302      	addmi	r3, #2
 8002c5a:	f8c9 3000 	strmi.w	r3, [r9]
 8002c5e:	6825      	ldr	r5, [r4, #0]
 8002c60:	f015 0506 	ands.w	r5, r5, #6
 8002c64:	d107      	bne.n	8002c76 <_printf_common+0x52>
 8002c66:	f104 0a19 	add.w	sl, r4, #25
 8002c6a:	68e3      	ldr	r3, [r4, #12]
 8002c6c:	f8d9 2000 	ldr.w	r2, [r9]
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	429d      	cmp	r5, r3
 8002c74:	db29      	blt.n	8002cca <_printf_common+0xa6>
 8002c76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c7a:	6822      	ldr	r2, [r4, #0]
 8002c7c:	3300      	adds	r3, #0
 8002c7e:	bf18      	it	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	0692      	lsls	r2, r2, #26
 8002c84:	d42e      	bmi.n	8002ce4 <_printf_common+0xc0>
 8002c86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c8a:	4639      	mov	r1, r7
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	47c0      	blx	r8
 8002c90:	3001      	adds	r0, #1
 8002c92:	d021      	beq.n	8002cd8 <_printf_common+0xb4>
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	68e5      	ldr	r5, [r4, #12]
 8002c98:	f8d9 2000 	ldr.w	r2, [r9]
 8002c9c:	f003 0306 	and.w	r3, r3, #6
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	bf08      	it	eq
 8002ca4:	1aad      	subeq	r5, r5, r2
 8002ca6:	68a3      	ldr	r3, [r4, #8]
 8002ca8:	6922      	ldr	r2, [r4, #16]
 8002caa:	bf0c      	ite	eq
 8002cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cb0:	2500      	movne	r5, #0
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	bfc4      	itt	gt
 8002cb6:	1a9b      	subgt	r3, r3, r2
 8002cb8:	18ed      	addgt	r5, r5, r3
 8002cba:	f04f 0900 	mov.w	r9, #0
 8002cbe:	341a      	adds	r4, #26
 8002cc0:	454d      	cmp	r5, r9
 8002cc2:	d11b      	bne.n	8002cfc <_printf_common+0xd8>
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cca:	2301      	movs	r3, #1
 8002ccc:	4652      	mov	r2, sl
 8002cce:	4639      	mov	r1, r7
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	47c0      	blx	r8
 8002cd4:	3001      	adds	r0, #1
 8002cd6:	d103      	bne.n	8002ce0 <_printf_common+0xbc>
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ce0:	3501      	adds	r5, #1
 8002ce2:	e7c2      	b.n	8002c6a <_printf_common+0x46>
 8002ce4:	18e1      	adds	r1, r4, r3
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	2030      	movs	r0, #48	; 0x30
 8002cea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cee:	4422      	add	r2, r4
 8002cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	e7c4      	b.n	8002c86 <_printf_common+0x62>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	4622      	mov	r2, r4
 8002d00:	4639      	mov	r1, r7
 8002d02:	4630      	mov	r0, r6
 8002d04:	47c0      	blx	r8
 8002d06:	3001      	adds	r0, #1
 8002d08:	d0e6      	beq.n	8002cd8 <_printf_common+0xb4>
 8002d0a:	f109 0901 	add.w	r9, r9, #1
 8002d0e:	e7d7      	b.n	8002cc0 <_printf_common+0x9c>

08002d10 <_printf_i>:
 8002d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d14:	4617      	mov	r7, r2
 8002d16:	7e0a      	ldrb	r2, [r1, #24]
 8002d18:	b085      	sub	sp, #20
 8002d1a:	2a6e      	cmp	r2, #110	; 0x6e
 8002d1c:	4698      	mov	r8, r3
 8002d1e:	4606      	mov	r6, r0
 8002d20:	460c      	mov	r4, r1
 8002d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d24:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002d28:	f000 80bc 	beq.w	8002ea4 <_printf_i+0x194>
 8002d2c:	d81a      	bhi.n	8002d64 <_printf_i+0x54>
 8002d2e:	2a63      	cmp	r2, #99	; 0x63
 8002d30:	d02e      	beq.n	8002d90 <_printf_i+0x80>
 8002d32:	d80a      	bhi.n	8002d4a <_printf_i+0x3a>
 8002d34:	2a00      	cmp	r2, #0
 8002d36:	f000 80c8 	beq.w	8002eca <_printf_i+0x1ba>
 8002d3a:	2a58      	cmp	r2, #88	; 0x58
 8002d3c:	f000 808a 	beq.w	8002e54 <_printf_i+0x144>
 8002d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d44:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002d48:	e02a      	b.n	8002da0 <_printf_i+0x90>
 8002d4a:	2a64      	cmp	r2, #100	; 0x64
 8002d4c:	d001      	beq.n	8002d52 <_printf_i+0x42>
 8002d4e:	2a69      	cmp	r2, #105	; 0x69
 8002d50:	d1f6      	bne.n	8002d40 <_printf_i+0x30>
 8002d52:	6821      	ldr	r1, [r4, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d5a:	d023      	beq.n	8002da4 <_printf_i+0x94>
 8002d5c:	1d11      	adds	r1, r2, #4
 8002d5e:	6019      	str	r1, [r3, #0]
 8002d60:	6813      	ldr	r3, [r2, #0]
 8002d62:	e027      	b.n	8002db4 <_printf_i+0xa4>
 8002d64:	2a73      	cmp	r2, #115	; 0x73
 8002d66:	f000 80b4 	beq.w	8002ed2 <_printf_i+0x1c2>
 8002d6a:	d808      	bhi.n	8002d7e <_printf_i+0x6e>
 8002d6c:	2a6f      	cmp	r2, #111	; 0x6f
 8002d6e:	d02a      	beq.n	8002dc6 <_printf_i+0xb6>
 8002d70:	2a70      	cmp	r2, #112	; 0x70
 8002d72:	d1e5      	bne.n	8002d40 <_printf_i+0x30>
 8002d74:	680a      	ldr	r2, [r1, #0]
 8002d76:	f042 0220 	orr.w	r2, r2, #32
 8002d7a:	600a      	str	r2, [r1, #0]
 8002d7c:	e003      	b.n	8002d86 <_printf_i+0x76>
 8002d7e:	2a75      	cmp	r2, #117	; 0x75
 8002d80:	d021      	beq.n	8002dc6 <_printf_i+0xb6>
 8002d82:	2a78      	cmp	r2, #120	; 0x78
 8002d84:	d1dc      	bne.n	8002d40 <_printf_i+0x30>
 8002d86:	2278      	movs	r2, #120	; 0x78
 8002d88:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002d8c:	496e      	ldr	r1, [pc, #440]	; (8002f48 <_printf_i+0x238>)
 8002d8e:	e064      	b.n	8002e5a <_printf_i+0x14a>
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002d96:	1d11      	adds	r1, r2, #4
 8002d98:	6019      	str	r1, [r3, #0]
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0a3      	b.n	8002eec <_printf_i+0x1dc>
 8002da4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002da8:	f102 0104 	add.w	r1, r2, #4
 8002dac:	6019      	str	r1, [r3, #0]
 8002dae:	d0d7      	beq.n	8002d60 <_printf_i+0x50>
 8002db0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da03      	bge.n	8002dc0 <_printf_i+0xb0>
 8002db8:	222d      	movs	r2, #45	; 0x2d
 8002dba:	425b      	negs	r3, r3
 8002dbc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002dc0:	4962      	ldr	r1, [pc, #392]	; (8002f4c <_printf_i+0x23c>)
 8002dc2:	220a      	movs	r2, #10
 8002dc4:	e017      	b.n	8002df6 <_printf_i+0xe6>
 8002dc6:	6820      	ldr	r0, [r4, #0]
 8002dc8:	6819      	ldr	r1, [r3, #0]
 8002dca:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002dce:	d003      	beq.n	8002dd8 <_printf_i+0xc8>
 8002dd0:	1d08      	adds	r0, r1, #4
 8002dd2:	6018      	str	r0, [r3, #0]
 8002dd4:	680b      	ldr	r3, [r1, #0]
 8002dd6:	e006      	b.n	8002de6 <_printf_i+0xd6>
 8002dd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ddc:	f101 0004 	add.w	r0, r1, #4
 8002de0:	6018      	str	r0, [r3, #0]
 8002de2:	d0f7      	beq.n	8002dd4 <_printf_i+0xc4>
 8002de4:	880b      	ldrh	r3, [r1, #0]
 8002de6:	4959      	ldr	r1, [pc, #356]	; (8002f4c <_printf_i+0x23c>)
 8002de8:	2a6f      	cmp	r2, #111	; 0x6f
 8002dea:	bf14      	ite	ne
 8002dec:	220a      	movne	r2, #10
 8002dee:	2208      	moveq	r2, #8
 8002df0:	2000      	movs	r0, #0
 8002df2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002df6:	6865      	ldr	r5, [r4, #4]
 8002df8:	60a5      	str	r5, [r4, #8]
 8002dfa:	2d00      	cmp	r5, #0
 8002dfc:	f2c0 809c 	blt.w	8002f38 <_printf_i+0x228>
 8002e00:	6820      	ldr	r0, [r4, #0]
 8002e02:	f020 0004 	bic.w	r0, r0, #4
 8002e06:	6020      	str	r0, [r4, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d13f      	bne.n	8002e8c <_printf_i+0x17c>
 8002e0c:	2d00      	cmp	r5, #0
 8002e0e:	f040 8095 	bne.w	8002f3c <_printf_i+0x22c>
 8002e12:	4675      	mov	r5, lr
 8002e14:	2a08      	cmp	r2, #8
 8002e16:	d10b      	bne.n	8002e30 <_printf_i+0x120>
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	07da      	lsls	r2, r3, #31
 8002e1c:	d508      	bpl.n	8002e30 <_printf_i+0x120>
 8002e1e:	6923      	ldr	r3, [r4, #16]
 8002e20:	6862      	ldr	r2, [r4, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	bfde      	ittt	le
 8002e26:	2330      	movle	r3, #48	; 0x30
 8002e28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e30:	ebae 0305 	sub.w	r3, lr, r5
 8002e34:	6123      	str	r3, [r4, #16]
 8002e36:	f8cd 8000 	str.w	r8, [sp]
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	aa03      	add	r2, sp, #12
 8002e3e:	4621      	mov	r1, r4
 8002e40:	4630      	mov	r0, r6
 8002e42:	f7ff feef 	bl	8002c24 <_printf_common>
 8002e46:	3001      	adds	r0, #1
 8002e48:	d155      	bne.n	8002ef6 <_printf_i+0x1e6>
 8002e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4e:	b005      	add	sp, #20
 8002e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e54:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002e58:	493c      	ldr	r1, [pc, #240]	; (8002f4c <_printf_i+0x23c>)
 8002e5a:	6822      	ldr	r2, [r4, #0]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e62:	f100 0504 	add.w	r5, r0, #4
 8002e66:	601d      	str	r5, [r3, #0]
 8002e68:	d001      	beq.n	8002e6e <_printf_i+0x15e>
 8002e6a:	6803      	ldr	r3, [r0, #0]
 8002e6c:	e002      	b.n	8002e74 <_printf_i+0x164>
 8002e6e:	0655      	lsls	r5, r2, #25
 8002e70:	d5fb      	bpl.n	8002e6a <_printf_i+0x15a>
 8002e72:	8803      	ldrh	r3, [r0, #0]
 8002e74:	07d0      	lsls	r0, r2, #31
 8002e76:	bf44      	itt	mi
 8002e78:	f042 0220 	orrmi.w	r2, r2, #32
 8002e7c:	6022      	strmi	r2, [r4, #0]
 8002e7e:	b91b      	cbnz	r3, 8002e88 <_printf_i+0x178>
 8002e80:	6822      	ldr	r2, [r4, #0]
 8002e82:	f022 0220 	bic.w	r2, r2, #32
 8002e86:	6022      	str	r2, [r4, #0]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	e7b1      	b.n	8002df0 <_printf_i+0xe0>
 8002e8c:	4675      	mov	r5, lr
 8002e8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e92:	fb02 3310 	mls	r3, r2, r0, r3
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d1f5      	bne.n	8002e8e <_printf_i+0x17e>
 8002ea2:	e7b7      	b.n	8002e14 <_printf_i+0x104>
 8002ea4:	6808      	ldr	r0, [r1, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	6949      	ldr	r1, [r1, #20]
 8002eaa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002eae:	d004      	beq.n	8002eba <_printf_i+0x1aa>
 8002eb0:	1d10      	adds	r0, r2, #4
 8002eb2:	6018      	str	r0, [r3, #0]
 8002eb4:	6813      	ldr	r3, [r2, #0]
 8002eb6:	6019      	str	r1, [r3, #0]
 8002eb8:	e007      	b.n	8002eca <_printf_i+0x1ba>
 8002eba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ebe:	f102 0004 	add.w	r0, r2, #4
 8002ec2:	6018      	str	r0, [r3, #0]
 8002ec4:	6813      	ldr	r3, [r2, #0]
 8002ec6:	d0f6      	beq.n	8002eb6 <_printf_i+0x1a6>
 8002ec8:	8019      	strh	r1, [r3, #0]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	6123      	str	r3, [r4, #16]
 8002ece:	4675      	mov	r5, lr
 8002ed0:	e7b1      	b.n	8002e36 <_printf_i+0x126>
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	1d11      	adds	r1, r2, #4
 8002ed6:	6019      	str	r1, [r3, #0]
 8002ed8:	6815      	ldr	r5, [r2, #0]
 8002eda:	6862      	ldr	r2, [r4, #4]
 8002edc:	2100      	movs	r1, #0
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f7fd f996 	bl	8000210 <memchr>
 8002ee4:	b108      	cbz	r0, 8002eea <_printf_i+0x1da>
 8002ee6:	1b40      	subs	r0, r0, r5
 8002ee8:	6060      	str	r0, [r4, #4]
 8002eea:	6863      	ldr	r3, [r4, #4]
 8002eec:	6123      	str	r3, [r4, #16]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef4:	e79f      	b.n	8002e36 <_printf_i+0x126>
 8002ef6:	6923      	ldr	r3, [r4, #16]
 8002ef8:	462a      	mov	r2, r5
 8002efa:	4639      	mov	r1, r7
 8002efc:	4630      	mov	r0, r6
 8002efe:	47c0      	blx	r8
 8002f00:	3001      	adds	r0, #1
 8002f02:	d0a2      	beq.n	8002e4a <_printf_i+0x13a>
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	079b      	lsls	r3, r3, #30
 8002f08:	d507      	bpl.n	8002f1a <_printf_i+0x20a>
 8002f0a:	2500      	movs	r5, #0
 8002f0c:	f104 0919 	add.w	r9, r4, #25
 8002f10:	68e3      	ldr	r3, [r4, #12]
 8002f12:	9a03      	ldr	r2, [sp, #12]
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	429d      	cmp	r5, r3
 8002f18:	db05      	blt.n	8002f26 <_printf_i+0x216>
 8002f1a:	68e0      	ldr	r0, [r4, #12]
 8002f1c:	9b03      	ldr	r3, [sp, #12]
 8002f1e:	4298      	cmp	r0, r3
 8002f20:	bfb8      	it	lt
 8002f22:	4618      	movlt	r0, r3
 8002f24:	e793      	b.n	8002e4e <_printf_i+0x13e>
 8002f26:	2301      	movs	r3, #1
 8002f28:	464a      	mov	r2, r9
 8002f2a:	4639      	mov	r1, r7
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	47c0      	blx	r8
 8002f30:	3001      	adds	r0, #1
 8002f32:	d08a      	beq.n	8002e4a <_printf_i+0x13a>
 8002f34:	3501      	adds	r5, #1
 8002f36:	e7eb      	b.n	8002f10 <_printf_i+0x200>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1a7      	bne.n	8002e8c <_printf_i+0x17c>
 8002f3c:	780b      	ldrb	r3, [r1, #0]
 8002f3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f46:	e765      	b.n	8002e14 <_printf_i+0x104>
 8002f48:	0800328a 	.word	0x0800328a
 8002f4c:	08003279 	.word	0x08003279

08002f50 <memcpy>:
 8002f50:	b510      	push	{r4, lr}
 8002f52:	1e43      	subs	r3, r0, #1
 8002f54:	440a      	add	r2, r1
 8002f56:	4291      	cmp	r1, r2
 8002f58:	d100      	bne.n	8002f5c <memcpy+0xc>
 8002f5a:	bd10      	pop	{r4, pc}
 8002f5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f64:	e7f7      	b.n	8002f56 <memcpy+0x6>

08002f66 <memmove>:
 8002f66:	4288      	cmp	r0, r1
 8002f68:	b510      	push	{r4, lr}
 8002f6a:	eb01 0302 	add.w	r3, r1, r2
 8002f6e:	d803      	bhi.n	8002f78 <memmove+0x12>
 8002f70:	1e42      	subs	r2, r0, #1
 8002f72:	4299      	cmp	r1, r3
 8002f74:	d10c      	bne.n	8002f90 <memmove+0x2a>
 8002f76:	bd10      	pop	{r4, pc}
 8002f78:	4298      	cmp	r0, r3
 8002f7a:	d2f9      	bcs.n	8002f70 <memmove+0xa>
 8002f7c:	1881      	adds	r1, r0, r2
 8002f7e:	1ad2      	subs	r2, r2, r3
 8002f80:	42d3      	cmn	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memmove+0x20>
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f8a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f8e:	e7f7      	b.n	8002f80 <memmove+0x1a>
 8002f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f94:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f98:	e7eb      	b.n	8002f72 <memmove+0xc>
	...

08002f9c <_free_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	2900      	cmp	r1, #0
 8002fa2:	d045      	beq.n	8003030 <_free_r+0x94>
 8002fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fa8:	1f0c      	subs	r4, r1, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bfb8      	it	lt
 8002fae:	18e4      	addlt	r4, r4, r3
 8002fb0:	f000 f8d6 	bl	8003160 <__malloc_lock>
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <_free_r+0x98>)
 8002fb6:	6813      	ldr	r3, [r2, #0]
 8002fb8:	4610      	mov	r0, r2
 8002fba:	b933      	cbnz	r3, 8002fca <_free_r+0x2e>
 8002fbc:	6063      	str	r3, [r4, #4]
 8002fbe:	6014      	str	r4, [r2, #0]
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fc6:	f000 b8cc 	b.w	8003162 <__malloc_unlock>
 8002fca:	42a3      	cmp	r3, r4
 8002fcc:	d90c      	bls.n	8002fe8 <_free_r+0x4c>
 8002fce:	6821      	ldr	r1, [r4, #0]
 8002fd0:	1862      	adds	r2, r4, r1
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	bf04      	itt	eq
 8002fd6:	681a      	ldreq	r2, [r3, #0]
 8002fd8:	685b      	ldreq	r3, [r3, #4]
 8002fda:	6063      	str	r3, [r4, #4]
 8002fdc:	bf04      	itt	eq
 8002fde:	1852      	addeq	r2, r2, r1
 8002fe0:	6022      	streq	r2, [r4, #0]
 8002fe2:	6004      	str	r4, [r0, #0]
 8002fe4:	e7ec      	b.n	8002fc0 <_free_r+0x24>
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	b10a      	cbz	r2, 8002ff0 <_free_r+0x54>
 8002fec:	42a2      	cmp	r2, r4
 8002fee:	d9fa      	bls.n	8002fe6 <_free_r+0x4a>
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	1858      	adds	r0, r3, r1
 8002ff4:	42a0      	cmp	r0, r4
 8002ff6:	d10b      	bne.n	8003010 <_free_r+0x74>
 8002ff8:	6820      	ldr	r0, [r4, #0]
 8002ffa:	4401      	add	r1, r0
 8002ffc:	1858      	adds	r0, r3, r1
 8002ffe:	4282      	cmp	r2, r0
 8003000:	6019      	str	r1, [r3, #0]
 8003002:	d1dd      	bne.n	8002fc0 <_free_r+0x24>
 8003004:	6810      	ldr	r0, [r2, #0]
 8003006:	6852      	ldr	r2, [r2, #4]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	4401      	add	r1, r0
 800300c:	6019      	str	r1, [r3, #0]
 800300e:	e7d7      	b.n	8002fc0 <_free_r+0x24>
 8003010:	d902      	bls.n	8003018 <_free_r+0x7c>
 8003012:	230c      	movs	r3, #12
 8003014:	602b      	str	r3, [r5, #0]
 8003016:	e7d3      	b.n	8002fc0 <_free_r+0x24>
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	1821      	adds	r1, r4, r0
 800301c:	428a      	cmp	r2, r1
 800301e:	bf04      	itt	eq
 8003020:	6811      	ldreq	r1, [r2, #0]
 8003022:	6852      	ldreq	r2, [r2, #4]
 8003024:	6062      	str	r2, [r4, #4]
 8003026:	bf04      	itt	eq
 8003028:	1809      	addeq	r1, r1, r0
 800302a:	6021      	streq	r1, [r4, #0]
 800302c:	605c      	str	r4, [r3, #4]
 800302e:	e7c7      	b.n	8002fc0 <_free_r+0x24>
 8003030:	bd38      	pop	{r3, r4, r5, pc}
 8003032:	bf00      	nop
 8003034:	200000c4 	.word	0x200000c4

08003038 <_malloc_r>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	1ccd      	adds	r5, r1, #3
 800303c:	f025 0503 	bic.w	r5, r5, #3
 8003040:	3508      	adds	r5, #8
 8003042:	2d0c      	cmp	r5, #12
 8003044:	bf38      	it	cc
 8003046:	250c      	movcc	r5, #12
 8003048:	2d00      	cmp	r5, #0
 800304a:	4606      	mov	r6, r0
 800304c:	db01      	blt.n	8003052 <_malloc_r+0x1a>
 800304e:	42a9      	cmp	r1, r5
 8003050:	d903      	bls.n	800305a <_malloc_r+0x22>
 8003052:	230c      	movs	r3, #12
 8003054:	6033      	str	r3, [r6, #0]
 8003056:	2000      	movs	r0, #0
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	f000 f881 	bl	8003160 <__malloc_lock>
 800305e:	4a23      	ldr	r2, [pc, #140]	; (80030ec <_malloc_r+0xb4>)
 8003060:	6814      	ldr	r4, [r2, #0]
 8003062:	4621      	mov	r1, r4
 8003064:	b991      	cbnz	r1, 800308c <_malloc_r+0x54>
 8003066:	4c22      	ldr	r4, [pc, #136]	; (80030f0 <_malloc_r+0xb8>)
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	b91b      	cbnz	r3, 8003074 <_malloc_r+0x3c>
 800306c:	4630      	mov	r0, r6
 800306e:	f000 f867 	bl	8003140 <_sbrk_r>
 8003072:	6020      	str	r0, [r4, #0]
 8003074:	4629      	mov	r1, r5
 8003076:	4630      	mov	r0, r6
 8003078:	f000 f862 	bl	8003140 <_sbrk_r>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d126      	bne.n	80030ce <_malloc_r+0x96>
 8003080:	230c      	movs	r3, #12
 8003082:	6033      	str	r3, [r6, #0]
 8003084:	4630      	mov	r0, r6
 8003086:	f000 f86c 	bl	8003162 <__malloc_unlock>
 800308a:	e7e4      	b.n	8003056 <_malloc_r+0x1e>
 800308c:	680b      	ldr	r3, [r1, #0]
 800308e:	1b5b      	subs	r3, r3, r5
 8003090:	d41a      	bmi.n	80030c8 <_malloc_r+0x90>
 8003092:	2b0b      	cmp	r3, #11
 8003094:	d90f      	bls.n	80030b6 <_malloc_r+0x7e>
 8003096:	600b      	str	r3, [r1, #0]
 8003098:	50cd      	str	r5, [r1, r3]
 800309a:	18cc      	adds	r4, r1, r3
 800309c:	4630      	mov	r0, r6
 800309e:	f000 f860 	bl	8003162 <__malloc_unlock>
 80030a2:	f104 000b 	add.w	r0, r4, #11
 80030a6:	1d23      	adds	r3, r4, #4
 80030a8:	f020 0007 	bic.w	r0, r0, #7
 80030ac:	1ac3      	subs	r3, r0, r3
 80030ae:	d01b      	beq.n	80030e8 <_malloc_r+0xb0>
 80030b0:	425a      	negs	r2, r3
 80030b2:	50e2      	str	r2, [r4, r3]
 80030b4:	bd70      	pop	{r4, r5, r6, pc}
 80030b6:	428c      	cmp	r4, r1
 80030b8:	bf0d      	iteet	eq
 80030ba:	6863      	ldreq	r3, [r4, #4]
 80030bc:	684b      	ldrne	r3, [r1, #4]
 80030be:	6063      	strne	r3, [r4, #4]
 80030c0:	6013      	streq	r3, [r2, #0]
 80030c2:	bf18      	it	ne
 80030c4:	460c      	movne	r4, r1
 80030c6:	e7e9      	b.n	800309c <_malloc_r+0x64>
 80030c8:	460c      	mov	r4, r1
 80030ca:	6849      	ldr	r1, [r1, #4]
 80030cc:	e7ca      	b.n	8003064 <_malloc_r+0x2c>
 80030ce:	1cc4      	adds	r4, r0, #3
 80030d0:	f024 0403 	bic.w	r4, r4, #3
 80030d4:	42a0      	cmp	r0, r4
 80030d6:	d005      	beq.n	80030e4 <_malloc_r+0xac>
 80030d8:	1a21      	subs	r1, r4, r0
 80030da:	4630      	mov	r0, r6
 80030dc:	f000 f830 	bl	8003140 <_sbrk_r>
 80030e0:	3001      	adds	r0, #1
 80030e2:	d0cd      	beq.n	8003080 <_malloc_r+0x48>
 80030e4:	6025      	str	r5, [r4, #0]
 80030e6:	e7d9      	b.n	800309c <_malloc_r+0x64>
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	bf00      	nop
 80030ec:	200000c4 	.word	0x200000c4
 80030f0:	200000c8 	.word	0x200000c8

080030f4 <_realloc_r>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	4607      	mov	r7, r0
 80030f8:	4614      	mov	r4, r2
 80030fa:	460e      	mov	r6, r1
 80030fc:	b921      	cbnz	r1, 8003108 <_realloc_r+0x14>
 80030fe:	4611      	mov	r1, r2
 8003100:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003104:	f7ff bf98 	b.w	8003038 <_malloc_r>
 8003108:	b922      	cbnz	r2, 8003114 <_realloc_r+0x20>
 800310a:	f7ff ff47 	bl	8002f9c <_free_r>
 800310e:	4625      	mov	r5, r4
 8003110:	4628      	mov	r0, r5
 8003112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003114:	f000 f826 	bl	8003164 <_malloc_usable_size_r>
 8003118:	4284      	cmp	r4, r0
 800311a:	d90f      	bls.n	800313c <_realloc_r+0x48>
 800311c:	4621      	mov	r1, r4
 800311e:	4638      	mov	r0, r7
 8003120:	f7ff ff8a 	bl	8003038 <_malloc_r>
 8003124:	4605      	mov	r5, r0
 8003126:	2800      	cmp	r0, #0
 8003128:	d0f2      	beq.n	8003110 <_realloc_r+0x1c>
 800312a:	4631      	mov	r1, r6
 800312c:	4622      	mov	r2, r4
 800312e:	f7ff ff0f 	bl	8002f50 <memcpy>
 8003132:	4631      	mov	r1, r6
 8003134:	4638      	mov	r0, r7
 8003136:	f7ff ff31 	bl	8002f9c <_free_r>
 800313a:	e7e9      	b.n	8003110 <_realloc_r+0x1c>
 800313c:	4635      	mov	r5, r6
 800313e:	e7e7      	b.n	8003110 <_realloc_r+0x1c>

08003140 <_sbrk_r>:
 8003140:	b538      	push	{r3, r4, r5, lr}
 8003142:	4c06      	ldr	r4, [pc, #24]	; (800315c <_sbrk_r+0x1c>)
 8003144:	2300      	movs	r3, #0
 8003146:	4605      	mov	r5, r0
 8003148:	4608      	mov	r0, r1
 800314a:	6023      	str	r3, [r4, #0]
 800314c:	f7ff f9a0 	bl	8002490 <_sbrk>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d102      	bne.n	800315a <_sbrk_r+0x1a>
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	b103      	cbz	r3, 800315a <_sbrk_r+0x1a>
 8003158:	602b      	str	r3, [r5, #0]
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	20000214 	.word	0x20000214

08003160 <__malloc_lock>:
 8003160:	4770      	bx	lr

08003162 <__malloc_unlock>:
 8003162:	4770      	bx	lr

08003164 <_malloc_usable_size_r>:
 8003164:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003168:	2800      	cmp	r0, #0
 800316a:	f1a0 0004 	sub.w	r0, r0, #4
 800316e:	bfbc      	itt	lt
 8003170:	580b      	ldrlt	r3, [r1, r0]
 8003172:	18c0      	addlt	r0, r0, r3
 8003174:	4770      	bx	lr
	...

08003178 <_init>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr

08003184 <_fini>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	bf00      	nop
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr
